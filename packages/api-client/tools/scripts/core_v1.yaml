openapi: 3.1.0
info:
  version: 1.0.0
  title: Swit Open API Documentation
  description: 'The Core API v1 is our initial API, enabling developers to interact with various Swit resources, such as workspaces, channels, projects, tasks, messages, and users. It serves as a practical tool for integrating your own application with Swit to boost team collaborations. Please note, the Core API v1 is slated for deprecation as we transition to Core API v2.'
  termsOfService: 'https://swit.io/privacy?sub=api-term'
  contact:
    name: Swit User & Developer Support
    url: 'https://help.swit.io/?support=true'
    email: help@swit.io
  license:
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
    name: Apache 2.0
servers:
  - url: 'https://openapi.swit.io/v1'
    description: Production
  - url: 'https://openapi.swit.express/v1'
    description: Stage
  - url: 'https://openapi2.swit.dev/v1'
    description: Development
paths:
  /api/user.info:
    get:
      tags:
        - User
      summary: Get user information
      description: Retrieves the authorizing user's basic account information.
      operationId: user.info
      responses:
        '200':
          description: Successfully retrieved the user's account information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetUserInfoResponse'
      security:
        - OAuth2Application:
            - 'user:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/user.info.update:
    post:
      tags:
        - User
      summary: Update the user's profile
      description: Updates the authorizing user's profile.
      operationId: user.info.update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  description: The name of the user.
                  examples:
                    - Jane Kim
                department:
                  type: string
                  description: Previously used in the Free/Standard plans to describe the department the user is in.
                  examples:
                    - Sales
                  x-deprecated: true
                tel:
                  type: string
                  description: The telephone number of the user.
                  examples:
                    - +82-10-1234-5678
                msg:
                  type: string
                  description: The status message of the user.
                  examples:
                    - Working from home.
                is_update_all_profile:
                  type: boolean
                  description: Previously used in the Free/Standard plans to describe whether to update all profiles across all workspaces the user is in.
                  default: true
                  x-deprecated: true
                update_fields:
                  type: array
                  description: The fields to update.
                  examples:
                    - - user_name
                      - msg
                  items:
                    type: string
      responses:
        '200':
          description: Successfully updated the user profile.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetUserInfoResponse'
      security:
        - OAuth2Application:
            - 'user:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/presence.sync.info:
    get:
      tags:
        - User
      summary: Get the user's presence sync setting
      description: 'Whether or not a `/api/presence.status.update` request can update the user''s presence sync setting for your app. In UI, users can view or change this setting in User Settings > Connected apps.'
      operationId: presence.sync.info
      responses:
        '200':
          description: Successfully retrieved the presence sync setting of the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserPresenceSyncStatusResponse'
      security:
        - OAuth2Application:
            - 'presence:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/presence.status.update:
    post:
      tags:
        - User
      summary: Update the user presence
      description: Updates the authorizing user's presence status.
      operationId: presence.status.update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mode:
                  enum:
                    - 'on'
                    - do_not_disturb
                    - absence
                  description: The status of the user to update to.
                do_not_disturb_duration:
                  type: string
                  description: The duration for the Do not disturb mode.
                  examples:
                    - '1'
      responses:
        '200':
          description: Successfully updated the user's presence status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mode:
                    enum:
                      - 'on'
                      - do_not_disturb
                      - absence
                    description: The presence status of the user.
                  is_online:
                    type: boolean
                    description: Whether the user is online.
                    default: true
                  do_not_disturb_started_at:
                    type: string
                    description: The date and time at which the Do not disturb mode started.
                    examples:
                      - '2022-04-15T05:13:48.713593Z'
                  do_not_disturb_duration:
                    type: string
                    description: The duration for the Do not disturb mode.
                    examples:
                      - '1'
                  user_id:
                    type: string
                    description: The ID of the user.
                    examples:
                      - 1908210134210XIiU3W
      security:
        - OAuth2Application:
            - 'presence:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/presence.sync.update:
    post:
      tags:
        - User
      summary: Toggle presence sync
      description: Set whether to allow your app to update the authorizing user's presence status via API.
      operationId: presence.sync.update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                is_presence_sync_on:
                  type: boolean
                  description: Whether to allow the app to update the authorizing user's presence sync.
                  default: true
      responses:
        '200':
          description: Successfully updated the presence sync setting of the app.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserPresenceSyncStatusResponse'
      security:
        - OAuth2Application:
            - 'presence:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/workspace.info:
    get:
      tags:
        - Workspace
      summary: Get workspace info
      description: Retrieves information about a workspace.
      operationId: workspace.info
      parameters:
        - name: id
          in: query
          description: The ID of the workspace.
          required: true
          schema:
            type: string
            examples:
              - 7kYTjHXN98FUutJK
          examples:
            default:
              value: 7kYTjHXN98FUutJK
      responses:
        '200':
          description: Successfully retrieved the workspace's information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetWorkspaceInfoResponse'
      security:
        - OAuth2Application:
            - 'workspace:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/workspace.list:
    get:
      tags:
        - Workspace
      summary: List out workspaces
      description: 'Lists out a given number of workspaces the user joined. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: workspace.list
      parameters:
        - name: limit
          in: query
          description: The number of workspaces to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: offset
          in: query
          description: Pass the "offset" string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
        - name: name
          in: query
          description: The domain of the workspace to retrieve
          schema:
            type: string
            examples:
              - Test WS
          examples:
            default:
              value: Test WS
        - name: page
          in: query
          description: The page number for a paginated response
          deprecated: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved the list of workspaces.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetWorkspaceListResponse'
      security:
        - OAuth2Application:
            - 'workspace:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/workspace.update:
    post:
      tags:
        - Workspace
      summary: Update a workspace
      description: Updates an existing workspace.
      operationId: workspace.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutWorkspaceParam'
      responses:
        '200':
          description: Successfully updated the workspace.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PutWorkspaceResponse'
      security:
        - OAuth2Application:
            - 'workspace:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/workspace.user.info:
    get:
      tags:
        - Workspace
      summary: Get a workspace member's profile
      description: Retrieves a user's profile registered in a given workspace.
      operationId: workspace.user.info
      parameters:
        - name: workspace_id
          in: query
          description: The ID of the workspace.
          required: true
          schema:
            type: string
            examples:
              - 230104192047867TUC1
          examples:
            default:
              value: 230104192047867TUC1
        - name: user_id
          in: query
          description: 'The ID of the user. If not passed, the signed-in user''s profile will be retrieved.'
          schema:
            type: string
            examples:
              - 190826072741481FcvV
          examples:
            default:
              value: 190826072741481FcvV
      responses:
        '200':
          description: Successfully retrieved the user's profile.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/WorkspaceUserResponse'
      security:
        - OAuth2Application:
            - 'workspace:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/workspace.user.list:
    get:
      tags:
        - Workspace
      summary: List out workspace members
      description: 'Lists out a given number of members from a workspace. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: workspace.user.list
      parameters:
        - name: page
          in: query
          description: The page number for a paginated response
          deprecated: true
          schema:
            type: integer
            examples:
              - 2
          examples:
            default:
              value: 2
        - name: workspace_id
          in: query
          description: The ID of the workspace.
          required: true
          schema:
            type: string
            examples:
              - 7kPTjHXN98FUutGA
          examples:
            default:
              value: 7kPTjHXN98FUutGA
        - name: limit
          in: query
          description: The number of objects to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
        - name: keyword
          in: query
          description: 'The search keyword used to filter the member list based on their name or email. When using this parameter, make sure to pass the `type` parameter too.'
          schema:
            type: string
            examples:
              - gmail
          examples:
            default:
              value: gmail
        - name: type
          in: query
          description: Whether to search by name or email.
          schema:
            enum:
              - name
              - email
      responses:
        '200':
          description: Successfully retrieved the members.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetWorkspaceUserListResponse'
      security:
        - OAuth2Application:
            - 'workspace:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/organization.workspace.invite:
    post:
      tags:
        - Workspace
      summary: Invite a member
      description: Invites a member to the workspace.
      operationId: organization.workspace.invite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCompanyWorkspaceInviteParam'
      responses:
        '200':
          description: Successfully invited the member to the workspace
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddCompanyWorkspaceInviteResponse'
      security:
        - OAuth2Application:
            - 'workspace:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/workspace.group.list:
    get:
      tags:
        - Workspace
      summary: Retrieve a workspace's list of groups
      description: Retrieves a list of groups in a workspace
      operationId: workspace.group.list
      parameters:
        - name: page
          in: query
          description: The page number for a paginated response.
          deprecated: true
          schema:
            type: integer
            examples:
              - 2
          examples:
            default:
              value: 2
        - name: cnt
          in: query
          description: The number of objects to return per page
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: ws_id
          in: query
          description: The ID of the workspace
          required: true
          schema:
            type: string
            examples:
              - 7kPTjHXN98FUutGA
          examples:
            default:
              value: 7kPTjHXN98FUutGA
        - name: keyword
          in: query
          description: The search keyword used to filter the group list
          schema:
            type: string
            examples:
              - US office
          examples:
            default:
              value: US office
      responses:
        '200':
          description: Successfully retrieved the workspace group list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/WorkspaceGroup'
      security:
        - OAuth2Application:
            - 'workspace:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/workspace.group.invite:
    post:
      tags:
        - Workspace
      summary: Invite users to a group in a workspace
      description: Invites a user to a group in a workspace.
      operationId: post-api-workspace.group.invite
      requestBody:
        description: The users to invite and the group and workspace to invite them to.
        content:
          application/json:
            schema:
              type: object
              properties:
                workspace_id:
                  type: string
                  description: The ID of the workspace.
                  examples:
                    - 191028004303652vk3M
                group_id:
                  type: string
                  description: The ID of the group.
                  examples:
                    - '20071408275494180'
                user_ids:
                  type: array
                  description: The IDs of users.
                  examples:
                    - - 220327051250T3AfDDu
                      - 220828163440rQVO7Tb
                  items:
                    type: string
      responses:
        '204':
          description: No Content
      security:
        - OAuth2Application:
            - 'workspace:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/emoji.listByWorkspace:
    get:
      tags:
        - Workspace
      summary: Retrieve a custom emoji list from a workspace
      description: Retrieve the list of custom emojis used in a given workspace
      operationId: '[GET]/api/emoji.listByWorkspace'
      parameters:
        - name: ws_id
          in: query
          description: The ID of the workspace
          required: true
          schema:
            type: string
            examples:
              - 191028004303652vk3M
          examples:
            default:
              value: 191028004303652vk3M
      responses:
        '200':
          description: Successfully retrieved the emoji list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: The list of emojis.
                    items:
                      $ref: '#/components/schemas/Emoji'
      security:
        - OAuth2Application:
            - 'workspace:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/channel.info:
    get:
      tags:
        - Channel
      summary: Get a channel's information
      description: Retrieves information about a channel.
      operationId: channel.info
      parameters:
        - name: id
          in: query
          description: The ID of the channel.
          required: true
          schema:
            type: string
            examples:
              - 201027126104712l114
          examples:
            default:
              value: 201027126104712l114
      responses:
        '200':
          description: Successfully retrieved the channel's information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetChannelResponse'
      security:
        - OAuth2Application:
            - 'channel:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/channel.list:
    get:
      tags:
        - Channel
      summary: List out channels
      description: 'Lists out a given number of channels from a workspace. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: channel.list
      parameters:
        - name: activity
          in: query
          description: 'Filter the list by whether the channel is active (`act`) or archived (`arch`). You can select a comma-delimited list of multiple property filters. If not passed, both filters will be selected.'
          schema:
            type: string
        - name: disclosure
          in: query
          description: 'Filter the list by whether the channel is pubic (`pub`) or private (`pri`). You can select a comma-delimited list of multiple property filters. If not passed, both filters will be selected.'
          schema:
            type: string
        - name: type
          in: query
          description: |-
            Filter the list by channel type.

            - `dfl`: The channel is the default chat room joined by all workspace members.
            - `gen`: The channel is an additionally created group chat.

            You can select a comma-delimited list of multiple type filters. If not passed, all filters will be selected.
          schema:
            type: string
        - name: name
          in: query
          description: The name of the channel.
          schema:
            type: string
            examples:
              - Marketing channel
          examples:
            default:
              value: Marketing channel
        - name: page
          in: query
          description: The page number for a paginated response.
          deprecated: true
          schema:
            type: integer
            examples:
              - 2
          examples:
            default:
              value: 2
        - name: workspace_id
          in: query
          description: The ID of the workspace.
          required: true
          schema:
            type: string
            examples:
              - 191028004303652vk3M
          examples:
            default:
              value: 191028004303652vk3M
        - name: limit
          in: query
          description: The number of channels to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
      responses:
        '200':
          description: Successfully retrieved the channels.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetChannelListResponse'
      security:
        - OAuth2Application:
            - 'channel:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/channel.create:
    post:
      tags:
        - Channel
      summary: Create a channel
      description: Creates a new channel in a workspace.
      operationId: channel.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddChannelParam'
      responses:
        '200':
          description: Successfully created the channel.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddChannelResponse'
      security:
        - OAuth2Application:
            - 'channel:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/channel.update:
    post:
      tags:
        - Channel
      summary: Update a channel
      description: Updates an existing channel.
      operationId: channel.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutChannelParam'
      responses:
        '200':
          description: Successfully updated the channel.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PutChannelResponse'
      security:
        - OAuth2Application:
            - 'channel:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/channel.user.list:
    get:
      tags:
        - Channel
      summary: List out channel members
      description: 'Lists out a given number of members belonging to a channel. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: channel.user.list
      parameters:
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
        - name: page
          in: query
          description: The page number for a paginated response
          deprecated: true
          schema:
            type: integer
            examples:
              - 2
          examples:
            default:
              value: 2
        - name: channel_id
          in: query
          description: The ID of the channel.
          required: true
          schema:
            type: string
            examples:
              - 201027126104712l114
          examples:
            default:
              value: 201027126104712l114
        - name: limit
          in: query
          description: The number of members to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
      responses:
        '200':
          description: Successfully retrieved the channel members.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetChannelUserListResponse'
      security:
        - OAuth2Application:
            - 'channel:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/channel.user.invite:
    post:
      tags:
        - Channel
      summary: Invite a user to the channel
      description: Invites a user to a channel.
      operationId: channel.AddChannelUserInvite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddChannelUserInviteParam'
      responses:
        '200':
          description: Successfully invited the users to the channel.
      security:
        - OAuth2Application:
            - 'channel:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/channel.user.remove:
    post:
      tags:
        - Channel
      summary: Remove users from a channel
      description: Removes users from a channel
      operationId: channel.DelChannelUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelChannelUserParam'
      responses:
        '200':
          description: Successfully removed the users from the channel
      security:
        - OAuth2Application:
            - 'channel:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/channel.archive:
    post:
      tags:
        - Channel
      summary: Archive/unarchive a channel
      description: Updates a channel's archiving status.
      operationId: channel.UpdateChannelArchive
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChannelArchiveParam'
      responses:
        '204':
          description: Successfully updated the channel's archiving status.
      security:
        - OAuth2Application:
            - 'channel:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/message.info:
    get:
      tags:
        - Message
      summary: Get a message's information
      description: Retrieves information about a message.
      operationId: message.info
      parameters:
        - name: id
          in: query
          description: The ID of the message.
          required: true
          schema:
            type: string
            examples:
              - 21080607597093STYhd
          examples:
            default:
              value: 21080607597093STYhd
      responses:
        '200':
          description: Successfully retrieved information about the message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Message'
      security:
        - OAuth2Application:
            - 'message:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/message.list:
    get:
      tags:
        - Message
      summary: List out messages
      description: 'Lists out a given number of messages in a channel. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: message.list
      parameters:
        - name: limit
          in: query
          description: The number of messages to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: channel_id
          in: query
          description: The ID of the channel from which to get messages.
          required: true
          schema:
            type: string
            examples:
              - 201027126104712l114
          examples:
            default:
              value: 201027126104712l114
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
      responses:
        '200':
          description: Successfully retrieved the messages.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetMessageListResponse'
      security:
        - OAuth2Application:
            - 'message:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/message.create:
    post:
      tags:
        - Message
      summary: Create a message
      description: Creates a message in a channel.
      operationId: message.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageParam'
      responses:
        '200':
          description: Successfully created the message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateMessageResponse'
      security:
        - OAuth2Application:
            - 'message:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/message.share:
    post:
      tags:
        - Message
      summary: Share a message to a channel
      description: Shares a message to a channel.
      operationId: post-api-message.share
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message_id:
                  type: string
                  description: The ID of the message.
                  examples:
                    - 21080607597093STYhd
                channel_id:
                  type: string
                  description: The ID of the channel.
                  examples:
                    - 201027126104712l114
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateMessageFromMailResponse'
      security:
        - OAuth2Application:
            - 'message:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/message.taskShare:
    post:
      tags:
        - Message
      summary: Share a task to a channel
      description: Shares a task to a channel.
      operationId: post-api-message.taskShare
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                task_id:
                  type: string
                  description: ID of the task.
                  examples:
                    - 221031071570KNs6NFX
                channel_id:
                  type: string
                  description: ID of the channel.
                  examples:
                    - 201027126104712l114
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateMessageFromMailResponse'
      security:
        - OAuth2Application:
            - 'message:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/message.remove:
    post:
      tags:
        - Message
      summary: Delete a message
      description: Deletes a message in a channel.
      operationId: message.remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMessageParam'
      responses:
        '200':
          description: Successfully deleted the message.
      security:
        - OAuth2Application:
            - 'message:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/message.reaction.create:
    post:
      tags:
        - Message
      summary: React to a message
      description: Adds a reaction emoji to a message.
      operationId: message.reaction.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMessageReactionParam'
      responses:
        '200':
          description: Successfully added the reaction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddMessageReactionResponse'
      security:
        - OAuth2Application:
            - 'message:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/message.reaction.remove:
    post:
      tags:
        - Message
      summary: Remove a reaction emoji from a message
      description: Removes a reaction emoji from a message.
      operationId: message.reaction.remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelMessageReactionParam'
      responses:
        '200':
          description: Successfully removed the reaction.
      security:
        - OAuth2Application:
            - 'message:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/message.comment.list:
    get:
      tags:
        - MessageComment
      summary: List out message comments
      description: 'Lists out a given number of comments on a message. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: message.comment.list
      parameters:
        - name: message_id
          in: query
          description: The ID of the message from which to get comments.
          required: true
          schema:
            type: string
            examples:
              - 21080607597093STYhd
          examples:
            default:
              value: 21080607597093STYhd
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
        - name: limit
          in: query
          description: The number of comments to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
      responses:
        '200':
          description: Successfully retrieved the comments.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetMessageCommentListResponse'
      security:
        - OAuth2Application:
            - 'message:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/message.comment.create:
    post:
      tags:
        - MessageComment
      summary: Comment on a message
      description: Posts a comment on a message.
      operationId: message.comment.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageCommentParam'
      responses:
        '200':
          description: Successfully commented on the message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateMessageCommentResponse'
      security:
        - OAuth2Application:
            - 'message:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/message.comment.remove:
    post:
      tags:
        - MessageComment
      summary: Delete a message comment
      description: Deletes a comment on a message.
      operationId: message.comment.remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMessageCommentParam'
      responses:
        '200':
          description: Successfully deleted the comment.
      security:
        - OAuth2Application:
            - 'message:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/message.comment.reactionCreate:
    post:
      tags:
        - MessageComment
      summary: React to a message comment
      description: Adds a reaction emoji to a message's comment.
      operationId: post-api-message.comment.reactionCreate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment_id:
                  type: string
                  description: The ID of the comment to react to.
                  examples:
                    - 200401052521746EFE3
                reaction_value:
                  type: string
                  description: The key value of the reaction.
                  examples:
                    - ':joy:'
      responses:
        '204':
          description: No Content
      security:
        - OAuth2Application:
            - 'message:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/idea.info:
    get:
      tags:
        - Idea
      summary: Get an idea's information
      description: Retrieves information about an idea.
      operationId: idea.info
      parameters:
        - name: id
          in: query
          description: The ID of the idea.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved information about the idea.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetIdeaResponse'
      security:
        - OAuth2Application:
            - 'idea:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/idea.list:
    get:
      tags:
        - Idea
      summary: List out ideas
      description: 'Lists out a given number of ideas in a channel. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: idea.list
      parameters:
        - name: channel_id
          in: query
          description: The ID of the channel from which to get posts.
          required: true
          schema:
            type: string
            examples:
              - 201027126104712l114
          examples:
            default:
              value: 201027126104712l114
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
        - name: limit
          in: query
          description: The number of posts to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
      responses:
        '200':
          description: Successfully retrieved the ideas.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetIdeaListResponse'
      security:
        - OAuth2Application:
            - 'idea:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/idea.create:
    post:
      tags:
        - Idea
      summary: Create an idea
      description: Creates a idea in a channel.
      operationId: idea.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdeaParam'
      responses:
        '200':
          description: Successfully created the idea.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateIdeaResponse'
      security:
        - OAuth2Application:
            - 'idea:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/idea.remove:
    post:
      tags:
        - Idea
      summary: Delete an idea
      description: Deletes an idea in a channel.
      operationId: idea.remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelIdeaParam'
      responses:
        '200':
          description: Successfully deleted the idea.
      security:
        - OAuth2Application:
            - 'idea:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/idea.reaction.create:
    post:
      tags:
        - Idea
      summary: React to an idea
      description: Adds a reaction emoji to an idea.
      operationId: idea.reaction.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddIdeaReactionParam'
      responses:
        '200':
          description: Successfully added the reaction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddIdeaReactionResponse'
      security:
        - OAuth2Application:
            - 'idea:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/idea.reaction.remove:
    post:
      tags:
        - Idea
      summary: Remove a reaction emoji from an idea
      description: Removes a reaction emoji from an idea.
      operationId: idea.reaction.remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelIdeaReactionParam'
      responses:
        '200':
          description: Successfully removed the reaction.
      security:
        - OAuth2Application:
            - 'idea:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/idea.comment.list:
    get:
      tags:
        - IdeaComment
      summary: List out idea comments
      description: 'Lists out a given number of comments on an idea. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: idea.comment.list
      parameters:
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
        - name: limit
          in: query
          description: The number of comments to retrieve.
          schema:
            type: integer
            examples:
              - 10
          examples:
            default:
              value: 10
        - name: idea_id
          in: query
          description: The ID of the idea from which to get comments.
          required: true
          schema:
            type: string
            examples:
              - 21080344042039BrlBU
          examples:
            default:
              value: 21080344042039BrlBU
      responses:
        '200':
          description: Successfully retrieved the comments.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetIdeaCommentListResponse'
      security:
        - OAuth2Application:
            - 'idea:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/idea.comment.create:
    post:
      tags:
        - IdeaComment
      summary: Comment on an idea
      description: Posts a comment on an idea.
      operationId: idea.comment.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdeaCommentParam'
      responses:
        '200':
          description: Successfully commented on the idea.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateIdeaCommentResponse'
      security:
        - OAuth2Application:
            - 'idea:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/idea.comment.remove:
    post:
      tags:
        - IdeaComment
      summary: Delete an idea comment
      description: Deletes a comment on an idea.
      operationId: idea.comment.remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelIdeaCommentParam'
      responses:
        '200':
          description: Successfully deleted the comment.
      security:
        - OAuth2Application:
            - 'idea:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/project.info:
    get:
      tags:
        - Project
      summary: Get a project's information
      description: Retrieves information about a project.
      operationId: project.info
      parameters:
        - name: id
          in: query
          description: The ID of the project.
          required: true
          schema:
            type: string
            examples:
              - 2002130601276977jqA
          examples:
            default:
              value: 2002130601276977jqA
      responses:
        '200':
          description: Successfully retrieved the project's information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetProjectInfoResponse'
      security:
        - OAuth2Application:
            - 'project:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/project.list:
    get:
      tags:
        - Project
      summary: List out projects
      description: 'Lists out a given number of projects from a workspace. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: project.list
      parameters:
        - name: workspace_id
          in: query
          description: The ID of the workspace.
          required: true
          schema:
            type: string
            examples:
              - 7kPTjHXN98FUutGA
          examples:
            default:
              value: 7kPTjHXN98FUutGA
        - name: limit
          in: query
          description: The number of projects to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
        - name: activity
          in: query
          description: 'Filter the list by whether the project is active (`act`) or archived (`arch`). You can select a comma-delimited list of multiple property filters. If not passed, both filters will be selected.'
          schema:
            type: string
        - name: disclosure
          in: query
          description: 'Filter the list by whether the project is pubic (`pub`) or private (`pri`). You can select a comma-delimited list of multiple property filters. If not passed, both filters will be selected.'
          schema:
            type: string
        - name: name
          in: query
          description: The exact name of the project (case-insensitive) to retrieve.
          deprecated: true
          schema:
            type: string
            examples:
              - Website
        - name: page
          in: query
          description: The page number for a paginated response.
          deprecated: true
          schema:
            type: integer
            examples:
              - 2
          examples:
            default:
              value: 2
      responses:
        '200':
          description: Successfully retrieved the projects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetProjectListResponse'
      security:
        - OAuth2Application:
            - 'project:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/project.create:
    post:
      tags:
        - Project
      summary: Create a project
      description: Creates a project in a workspace.
      operationId: project.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProjectParam'
      responses:
        '200':
          description: Successfully created the project.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddProjectResponse'
      security:
        - OAuth2Application:
            - 'project:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/project.update:
    post:
      tags:
        - Project
      summary: Update a project
      description: Updates an existing project in a workspace.
      operationId: project.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProjectParam'
      responses:
        '200':
          description: Successfully updated the project.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PutProjectResponse'
      security:
        - OAuth2Application:
            - 'project:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/project.archive:
    post:
      tags:
        - Project
      summary: Archive/unarchive a project
      description: Updates a project's archiving status.
      operationId: project.UpdateProjectArchive
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectArchiveParam'
      responses:
        '204':
          description: Successfully updated the project's archiving status.
      security:
        - OAuth2Application:
            - 'project:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/project.user.list:
    get:
      tags:
        - Project
      summary: List out project members
      description: 'Lists out a given number of members belonging to a project. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: project.user.list
      parameters:
        - name: project_id
          in: query
          description: The ID of the project.
          required: true
          schema:
            type: string
            examples:
              - 2002130601276977jqA
          examples:
            default:
              value: 2002130601276977jqA
        - name: limit
          in: query
          description: The number of members to retrieve.
          schema:
            type: integer
            examples:
              - 10
          examples:
            default:
              value: 10
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
        - name: page
          in: query
          description: The page number for a paginated response
          deprecated: true
          schema:
            type: integer
            examples:
              - 2
          examples:
            default:
              value: 2
      responses:
        '200':
          description: Successfully retrieved the members.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetProjectUserListResponse'
      security:
        - OAuth2Application:
            - 'project:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/project.user.invite:
    post:
      tags:
        - Project
      summary: Invite users to a project
      description: Invites users to a project.
      operationId: post-api-project.user.invite
      requestBody:
        description: The users to invite and the project to invite them to.
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: The ID of the project.
                  examples:
                    - 2002130601276977jqA
                user_ids:
                  type: array
                  description: The IDs of users.
                  examples:
                    - - 190826072741481FcvV
                      - 220113011810x7bqTRU
                  items:
                    type: string
      responses:
        '204':
          description: No Content
      security:
        - OAuth2Application:
            - 'project:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/project.tagList:
    get:
      tags:
        - Project
      summary: List out task tags
      description: |-
        Lists out all task tags used in a project.

        Assigned to tasks of a project, tags facilitate filtering or searching
        those tasks for viewing convenience. This method enumerates all tags
        assigned at least once to any task of the target project.
      operationId: project.tagList
      parameters:
        - name: id
          in: query
          description: The ID of the project.
          required: true
          schema:
            type: string
            examples:
              - 2002130601276977jqA
          examples:
            default:
              value: 2002130601276977jqA
        - name: limit
          in: query
          description: The number of tags to retrieve.
          schema:
            type: integer
            examples:
              - 10
          examples:
            default:
              value: 10
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
      responses:
        '200':
          description: Successfully retrieved the tags from the project.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetProjectTagListResponse'
      security:
        - OAuth2Application:
            - 'project:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.status.list:
    get:
      tags:
        - Project
      summary: List out statuses in a project
      description: Lists out the list of statuses in a given project.
      operationId: task.status.list
      parameters:
        - name: project_id
          in: query
          description: The ID of the project.
          required: true
          schema:
            type: string
            examples:
              - 190910100433344Dtjf
          examples:
            default:
              value: 190910100433344Dtjf
      responses:
        '200':
          description: Successfully retrieved the list of statuses in a project.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    description: An object wrapping a Swit resource.
                    properties:
                      status_list:
                        type: array
                        description: Statuses in the project.
                        items:
                          $ref: '#/components/schemas/StatusCustom'
      security:
        - OAuth2Application:
            - 'task:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/project.bucket.info:
    get:
      tags:
        - ProjectBucket
      summary: Get a task bucket's information
      description: Retrieves information about a task bucket.
      operationId: project.bucket.info
      parameters:
        - name: project_id
          in: query
          description: The ID of the project that contains the bucket.
          required: true
          schema:
            type: string
            examples:
              - 2002130601276977jqA
          examples:
            default:
              value: 2002130601276977jqA
        - name: id
          in: query
          description: The ID of the bucket the task is in.
          required: true
          schema:
            type: string
            examples:
              - 290324092890QsjMT8I
          examples:
            default:
              value: 290324092890QsjMT8I
      responses:
        '200':
          description: Successfully retrieved the bucket's information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetProjectBucketInfoResponse'
      security:
        - OAuth2Application:
            - 'project:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/project.bucket.list:
    get:
      tags:
        - ProjectBucket
      summary: List out task buckets
      description: Lists out all task buckets from a project.
      operationId: project.bucket.list
      parameters:
        - name: project_id
          in: query
          description: The ID of the project.
          required: true
          schema:
            type: string
            examples:
              - 2002130601276977jqA
          examples:
            default:
              value: 2002130601276977jqA
        - name: limit
          in: query
          description: The number of buckets to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
      responses:
        '200':
          description: Successfully retrieved the buckets.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetProjectBucketListResponse'
      security:
        - OAuth2Application:
            - 'project:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/project.bucket.create:
    post:
      tags:
        - ProjectBucket
      summary: Add a task bucket
      description: Adds a task bucket in a project.
      operationId: project.bucket.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProjectBucketParam'
      responses:
        '200':
          description: Successfully added the bucket.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddProjectBucketResponse'
      security:
        - OAuth2Application:
            - 'project:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/project.bucket.update:
    post:
      tags:
        - ProjectBucket
      summary: Update a task bucket
      description: Updates the title of an existing task bucket in a project.
      operationId: project.bucket.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutProjectBucketParam'
      responses:
        '200':
          description: Successfully updated the bucket.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PutProjectBucketResponse'
      security:
        - OAuth2Application:
            - 'project:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.info:
    get:
      tags:
        - Task
      summary: Get a task's information
      description: Retrieves information about a task.
      operationId: task.info
      parameters:
        - name: id
          in: query
          description: The ID of the task.
          required: true
          schema:
            type: string
            examples:
              - 190910100433344Dtjf
          examples:
            default:
              value: 190910100433344Dtjf
        - name: body_type
          in: query
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          schema:
            enum:
              - plain
              - json_string
            default: plain
      responses:
        '200':
          description: Successfully retrieved the task's information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetTaskInfoResponse'
      security:
        - OAuth2Application:
            - 'task:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.list:
    get:
      tags:
        - Task
      summary: List out tasks
      description: 'Lists out a given number of tasks from a project. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: task.list
      parameters:
        - name: workspace_id
          in: query
          description: The ID of the workspace that includes the target project. Only required when `mytask` is passed to the `project_id` parameter (to get the Personal tasks).
          schema:
            type: string
            examples:
              - 7kPTjHXN98FUutGA
          examples:
            default:
              value: 7kPTjHXN98FUutGA
        - name: project_id
          in: query
          description: 'The ID of the project. To get the Personal tasks that are visible only to you, pass `mytask`.'
          required: true
          schema:
            type: string
            examples:
              - 2002130601276977jqA
          examples:
            default:
              value: 2002130601276977jqA
        - name: limit
          in: query
          description: The number of tasks to retrieve.
          schema:
            type: integer
            examples:
              - 10
          examples:
            default:
              value: 10
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
        - name: parent_id
          in: query
          description: The ID of the parent task.
          schema:
            type: string
            examples:
              - 1207810100433344Dtjy
          examples:
            default:
              value: 1207810100433344Dtjy
      responses:
        '200':
          description: Successfully retrieved the tasks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetTaskListProjectResponse'
      security:
        - OAuth2Application:
            - 'task:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.listByColumn:
    get:
      tags:
        - Task
      summary: List out tasks by bucket
      description: 'Lists out a given number of tasks from a bucket. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: task.listByColumn
      parameters:
        - name: project_id
          in: query
          description: The ID of the project.
          required: true
          schema:
            type: string
            examples:
              - 2002130601276977jqA
          examples:
            default:
              value: 2002130601276977jqA
        - name: bucket_id
          in: query
          description: The ID of the task bucket.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The number of tasks to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
      responses:
        '200':
          description: Successfully retrieved the tasks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetTaskListByColumnResponse'
      security:
        - OAuth2Application:
            - 'task:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.myTaskList:
    get:
      tags:
        - Task
      summary: List out my tasks
      description: Lists out "my tasks" of the user from a workspace.
      operationId: task.myTaskList
      parameters:
        - name: workspace_id
          in: query
          description: The ID of the workspace.
          required: true
          schema:
            type: string
            examples:
              - 7kPTjHXN98FUutGA
          examples:
            default:
              value: 7kPTjHXN98FUutGA
        - name: limit
          in: query
          description: The number of tasks to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
      responses:
        '200':
          description: Successfully retrieved my tasks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetTaskListMineResponse'
      security:
        - OAuth2Application:
            - 'task:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.create:
    post:
      tags:
        - Task
      summary: Create a task
      description: Creates a task in a project.
      operationId: task.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTaskParam'
      responses:
        '200':
          description: Successfully posted the task.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddTaskResponse'
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.remove:
    post:
      tags:
        - Task
      summary: Delete a task
      description: Deletes a task from a project.
      operationId: task.remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelTaskParam'
      responses:
        '200':
          description: Successfully deleted the task.
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.move:
    post:
      tags:
        - Task
      summary: Move a task
      description: Moves a task into another project.
      operationId: task.move
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveTaskParam'
      responses:
        '200':
          description: Successfully moved the task.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MoveTaskResponse'
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.update:
    post:
      tags:
        - Task
      summary: Update a task
      description: Updates a task in a project.
      operationId: task.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutTaskParam'
      responses:
        '200':
          description: Successfully updated the task.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PutTaskResponse'
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.assignee.add:
    post:
      tags:
        - Task
      summary: Add an assignee
      description: Adds an assignee to a task.
      operationId: task.assignee.add
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTaskAssigneeParam'
      responses:
        '200':
          description: Successfully added an assignee for the task.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddTaskAssigneeResponse'
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.assignee.remove:
    post:
      tags:
        - Task
      summary: Remove an assignee
      description: Removes a member from the managing role for a task.
      operationId: task.assignee.remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelTaskAssigneeParam'
      responses:
        '200':
          description: Successfully removed the assignee.
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.follow.add:
    post:
      tags:
        - Task
      summary: Add a collaborator
      description: Adds a collaborator to a task.
      operationId: task.follow.add
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTaskFollowParam'
      responses:
        '200':
          description: Successfully added the collaborator.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddTaskFollowResponse'
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.follow.remove:
    post:
      tags:
        - Task
      summary: Remove a collaborator
      description: Removes a collaborator from a task.
      operationId: task.follow.remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelTaskFollowParam'
      responses:
        '200':
          description: Successfully removed the collaborator.
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.status.update:
    post:
      tags:
        - Task
      summary: Update the status of a task
      description: Updates the status of a task.
      operationId: task.status.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task_id:
                  type: string
                  description: The ID of the task.
                  examples:
                    - 190910100433344Dtjf
                project_id:
                  type: string
                  description: The ID of the project.
                  examples:
                    - 2002130601276977jqA
                workspace_id:
                  type: string
                  description: The ID of the workspace.
                  examples:
                    - 210702062416646BVTPW
                to_status_id:
                  type: string
                  description: The ID of the custom status to update to.
                  examples:
                    - 23050403290569QPK9H8
      responses:
        '200':
          description: Successfully updated the status of the task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.asset.append:
    post:
      tags:
        - Task
      summary: Add attachments
      description: Adds file attachments to a task.
      operationId: task.asset.append
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppendAssetTaskParam'
      responses:
        '200':
          description: Successfully added the attachments to the task.
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/task.checklist.create:
    post:
      tags:
        - TaskChecklist
      summary: Add a checklist item
      description: Adds an item to a task's checklist.
      operationId: task.checklist.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTaskCheckListParam'
      responses:
        '200':
          description: Successfully added the item to the checklist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddTaskCheckListResponse'
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.checklist.info:
    get:
      tags:
        - TaskChecklist
      summary: Get a checklist item's information
      description: Retrieves information about a checklist item in a task.
      operationId: task.checklist.info
      parameters:
        - name: id
          in: query
          description: The ID of the checklist item.
          required: true
          schema:
            type: string
            examples:
              - 280403052250i4iZgjT
          examples:
            default:
              value: 280403052250i4iZgjT
      responses:
        '200':
          description: Successfully retrieved information about the checklist item.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetTaskCheckListResponse'
      security:
        - OAuth2Application:
            - 'task:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.checklist.list:
    get:
      tags:
        - TaskChecklist
      summary: List out checklist items
      description: 'Lists out a given number of items from a task''s checklist. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: task.checklist.list
      parameters:
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
        - name: task_id
          in: query
          description: The ID of the task.
          required: true
          schema:
            type: string
            examples:
              - 190910100433344Dtjf
          examples:
            default:
              value: 190910100433344Dtjf
        - name: limit
          in: query
          description: The number of checklist items to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
      responses:
        '200':
          description: Successfully retrieved items from the checklist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetTaskCheckListListResponse'
      security:
        - OAuth2Application:
            - 'task:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.checklist.remove:
    post:
      tags:
        - TaskChecklist
      summary: Delete a checklist item
      description: Deletes an item in a task's checklist.
      operationId: task.checklist.remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelTaskCheckListParam'
      responses:
        '200':
          description: Successfully deleted the checklist item.
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.checklist.update:
    post:
      tags:
        - TaskChecklist
      summary: Update a checklist item
      description: Updates an existing item of a task's checklist.
      operationId: task.checklist.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutTaskCheckListParam'
      responses:
        '200':
          description: Successfully updated the checklist item.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PutTaskCheckListResponse'
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.comment.create:
    post:
      tags:
        - TaskComment
      summary: Comment on a task
      description: Posts a comment on a task.
      operationId: task.comment.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTaskCommentParam'
      responses:
        '200':
          description: Successfully commented on the task.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddTaskCommentResponse'
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.comment.list:
    get:
      tags:
        - TaskComment
      summary: List out task comments
      description: 'Lists out a given number of comments on a task. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: task.comment.list
      parameters:
        - name: offset
          in: query
          description: The ordinal number of the page of comments to return.
          schema:
            type: string
        - name: body_type
          in: query
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          schema:
            enum:
              - plain
              - json_string
            default: plain
        - name: task_id
          in: query
          description: The ID of the task.
          required: true
          schema:
            type: string
            examples:
              - 190910100433344Dtjf
          examples:
            default:
              value: 190910100433344Dtjf
        - name: limit
          in: query
          description: The number of comments to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
      responses:
        '200':
          description: Successfully retrieved the comments.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetTaskCommentResponse'
      security:
        - OAuth2Application:
            - 'task:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.comment.remove:
    post:
      tags:
        - TaskComment
      summary: Delete a task comment
      description: Deletes a comment on a task.
      operationId: task.comment.remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelTaskCommentParam'
      responses:
        '200':
          description: Successfully deleted the comment.
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/task.comment.update:
    post:
      tags:
        - TaskComment
      summary: Edit a task comment
      description: Edits a comment on a task.
      operationId: task.comment.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutTaskCommentParam'
      responses:
        '200':
          description: Successfully edited the comment.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PutTaskCommentResponse'
      security:
        - OAuth2Application:
            - 'task:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/contents.info:
    get:
      tags:
        - DirectMessage
      summary: Get a chat message's information
      description: Retrieves information about a chat message.
      operationId: content
      parameters:
        - name: contents_id
          in: query
          description: The ID of the chat message.
          required: true
          schema:
            type: string
            examples:
              - 649b77793d8047f7821a883d1cf50bba
        - name: room_id
          in: query
          description: The ID of the chat.
          required: true
          schema:
            type: string
            examples:
              - 72f7d16bfab74675940476df159b1730
      responses:
        '200':
          description: Successfully retrieved information about the chat message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetContentsResponse'
      security:
        - OAuth2Application:
            - 'message:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/contents.list:
    get:
      tags:
        - DirectMessage
      summary: List out posts
      description: 'Lists out a given number of posts in a chat. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: content.list
      parameters:
        - name: offset_order_type
          in: query
          description: |
            Whether older or newer chat messages than the offset are to be returned, and whether the offset item is to be included or excluded.
              - `less`: Returns items older than the offset item.
              - `eq_less`: Returns items older than or equal to the offset item.
              - `greater`: Returns items newer than the offset item.
              - `eq_greater`: Returns items newer than or equal to the offset item.
          schema:
            enum:
              - less
              - eq_less
              - greater
              - eq_greater
        - name: limit
          in: query
          description: The number of chat messages to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: room_id
          in: query
          description: The ID of the chat from which to get chat messages.
          required: true
          schema:
            type: string
            examples:
              - 92f7d16bfab74675940476df159b1715
        - name: parent_id
          in: query
          description: The ID of the primary chat message for which associated comments are to be retrieved.
          schema:
            type: string
            examples:
              - 62f7d16bfab74675940476df159b1719
        - name: offset_contents_id
          in: query
          description: 'If you''d like to get chat messages older than a particular chat message, pass the ID of the baseline chat message for this parameter. If `offset` is passed, this parameter will be ignored.'
          schema:
            type: string
            examples:
              - 17690cf0abb04a249d15abf42836b0f7
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
      responses:
        '200':
          description: Successfully retrieved the chat messages.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetContentsListResponse'
      security:
        - OAuth2Application:
            - 'message:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/contents.create:
    post:
      tags:
        - DirectMessage
      summary: Create a chat message
      description: Creates a chat message.
      operationId: contents.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContentsParam'
      responses:
        '200':
          description: Successfully created the chat message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateContentsResponse'
      security:
        - OAuth2Application:
            - 'message:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/contents.update:
    post:
      tags:
        - DirectMessage
      summary: Update a chat message
      description: Updates a chat message.
      operationId: contents.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContentsParam'
      responses:
        '200':
          description: Successfully updated the chat message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UpdateContentsResponse'
      security:
        - OAuth2Application:
            - 'message:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/contents.delete:
    post:
      tags:
        - DirectMessage
      summary: Delete a chat message
      description: Deletes a chat message.
      operationId: contents.delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteContentsParam'
      responses:
        '200':
          description: Successfully deleted the chat message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DeleteContentsResponse'
      security:
        - OAuth2Application:
            - 'message:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/room.info:
    get:
      tags:
        - Conversation
      summary: Get a chat's information
      description: Retrieves information about a chat.
      operationId: room.info
      parameters:
        - name: room_id
          in: query
          description: The ID of the chat.
          required: true
          schema:
            type: string
            examples:
              - ef7f9b3e678b4384a91b5abc37ac142n
        - name: target_user_id
          in: query
          description: The user ID of the chat target.
          schema:
            type: string
            examples:
              - 2010161727509IJFTiX
      responses:
        '200':
          description: Successfully retrieved the chat's information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetRoomResponse'
      security:
        - OAuth2Application:
            - 'channel:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/room.list:
    get:
      tags:
        - Conversation
      summary: List out chats
      description: 'Lists out a given number of chats. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: room.list
      parameters:
        - name: offset_order_type
          in: query
          description: |
            Whether older or newer chat messages than the offset are to be returned, and whether the offset item is to be included or excluded.

              - `less`: Returns items older than the offset item, excluding the offset item.
              - `eq_less`: Returns items older than or equal to the offset item, including the offset item.
              - `greater`: Returns items newer than the offset item, excluding the offset item.
              - `eq_greater`: Returns items newer than or equal to the offset item, including the offset item.
          schema:
            enum:
              - less
              - eq_less
              - greater
              - eq_greater
        - name: limit
          in: query
          description: The number of chats to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: filter
          in: query
          description: The filter of the chat list.
          schema:
            enum:
              - all
              - starred
              - unread
        - name: search
          in: query
          description: The search keyword to filter the list by.
          schema:
            type: string
            examples:
              - keyword
        - name: page
          in: query
          description: The page number for a paginated response.
          deprecated: true
          schema:
            type: integer
            examples:
              - 2
          examples:
            default:
              value: 2
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
      responses:
        '200':
          description: Successfully retrieved the chats.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetRoomListResponse'
      security:
        - OAuth2Application:
            - 'channel:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/room.create:
    post:
      tags:
        - Conversation
      summary: Create a chat
      description: 'Creates a new chat. If a 1:1 chat with the specified member already exists, the response will not create a duplicate but instead return the existing chat''s information. For group chats with specified members, a new chat will be created even if one already exists with the same members.'
      operationId: room.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomParam'
      responses:
        '200':
          description: Successfully created the chat.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateRoomResponse'
      security:
        - OAuth2Application:
            - 'channel:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/room.update:
    post:
      tags:
        - Conversation
      summary: Update a chat
      description: Updates an existing chat.
      operationId: room.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoomParam'
      responses:
        '200':
          description: Successfully updated the chat.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UpdateRoomResponse'
      security:
        - OAuth2Application:
            - 'channel:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/room.leave:
    post:
      tags:
        - Conversation
      summary: Leave a chat
      description: The use leaves a chat.
      operationId: room.levae
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveRoomParam'
      responses:
        '200':
          description: Successfully left the chat.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LeaveRoomResponse'
      security:
        - OAuth2Application:
            - 'channel:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/room.invite:
    post:
      tags:
        - Conversation
      summary: Invite people
      description: Invites people to a chat.
      operationId: room.invite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteRoomParam'
      responses:
        '200':
          description: Successfully invited people to the chat.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InviteRoomResponse'
      security:
        - OAuth2Application:
            - 'channel:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/customfield.list:
    get:
      tags:
        - CustomField
      summary: List out custom fields
      description: Lists out all registered custom fields.
      operationId: customfield.list
      responses:
        '200':
          description: Successfully retrieved the custom fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetCustomFieldListResponse'
      security:
        - OAuth2Application:
            - 'user:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/customfield.add:
    post:
      tags:
        - CustomField
      summary: Add a custom field
      description: Adds a new custom field for user profiles.
      operationId: customfield.add
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCustomFieldParam'
      responses:
        '200':
          description: Successfully added the custom field.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddCustomFieldResponse'
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/customfield.delete:
    post:
      tags:
        - CustomField
      summary: Delete custom field
      description: Deletes a custom field for user profiles.
      operationId: customfield.delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCustomFieldParam'
      responses:
        '200':
          description: Successfully deleted the custom field.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DeleteCustomFieldResponse'
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/customfield.update:
    post:
      tags:
        - CustomField
      summary: Update a custom field
      description: Updates an existing custom field.
      operationId: customfield.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomFieldParam'
      responses:
        '200':
          description: Successfully updated the custom field.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UpdateCustomFieldResponse'
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/customfield.user.list:
    get:
      tags:
        - CustomField
      summary: List out a user's custom fields in use
      description: Retrieves the custom fields and their values used in a given user's profile.
      operationId: customfield.user.list
      parameters:
        - name: user_id
          in: query
          description: The ID of the target user.
          required: true
          schema:
            type: string
            examples:
              - 2010161727509IJFTiX
          examples:
            default:
              value: 2010161727509IJFTiX
      responses:
        '200':
          description: Successfully retrieved the user's custom field data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetUserCustomFieldListResponse'
      security:
        - OAuth2Application:
            - 'user:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/customfield.user.update:
    post:
      tags:
        - CustomField
      summary: Update a user's custom field data
      description: Updates the values of the custom fields used in a given user's profile.
      operationId: customfield.user.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserCustomFieldParam'
      responses:
        '200':
          description: Successfully updated the user's custom field data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UpdateUserCustomFieldResponse'
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/approval.create:
    post:
      tags:
        - Approval
      summary: Draft a request
      description: Creates a request draft for approval.
      operationId: approval.CreateApproval
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApprovalParam'
      responses:
        '200':
          description: Successfully created the request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CreateApprovalResponse'
      security:
        - OAuth2Application:
            - 'approval:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/approval.list.received:
    get:
      tags:
        - Approval
      summary: List out received requests
      description: 'Lists out a given number of requests from the user''s inbox. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: approval.GetApprovalListReceived
      parameters:
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
        - name: limit
          in: query
          description: The number of objects to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: filter.keyword
          in: query
          description: 'Filter requests whose ID, title, submitter, approvers, recipients match this keyword.'
          schema:
            type: string
            examples:
              - keyword
          examples:
            default:
              value: keyword
        - name: filter.is_bookmarked
          in: query
          description: Filter requests that are starred. Pass `1` to this parameter if you'd like to use this filter.
          schema:
            type: string
            examples:
              - '1'
          examples:
            default:
              value: '1'
        - name: filter.approval_category_ids
          in: query
          description: 'Filter requests by template in use. Pass a comma-delimited list of template IDs. If you want to include requests with no template, add `none` to the list.'
          schema:
            type: string
            examples:
              - 220519031330UwhTYlh
          examples:
            default:
              value: 220519031330UwhTYlh
        - name: filter.end_date
          in: query
          description: Filter requests submitted at or before this datetime. Use the ISO 8601 format in UTC.
          schema:
            type: string
            examples:
              - '2022-04-15T05:13:48.713593Z'
          examples:
            default:
              value: '2022-04-15T05:13:48.713593Z'
        - name: type
          in: query
          description: |-
            The tab from which to retrieve requests.
            - `me`: **My approvals**
            - `me_pending`: **My approvals** > **Pending**
            - `me_completed`: **My approvals** > **Completed**
            - `team`: **Circulated to my team**
            - `referrer_team`: **Received by my team**
            - `referrer`: **CC'd to me**
          schema:
            enum:
              - me
              - me_pending
              - me_completed
              - team
              - referrer_team
              - referrer
            examples:
              - me
          examples:
            default:
              value: me
        - name: filter.start_date
          in: query
          description: Filter requests submitted at or after this datetime. Use the ISO 8601 format in UTC.
          schema:
            type: string
            examples:
              - '2021-04-15T05:13:48.713593Z'
          examples:
            default:
              value: '2021-04-15T05:13:48.713593Z'
        - name: filter.approval_status
          in: query
          description: |-
            Filter requests whose status matches this setting.
            - `1`: Waiting
            - `2`: Approved
            - `3`: Denied

            You can pass a comma-delimited list of status codes (for example, `1,2`).
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the requests received.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ApprovalListResponse'
      security:
        - OAuth2Application:
            - 'approval:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/approval.list.sent:
    get:
      tags:
        - Approval
      summary: List out submitted requests
      description: 'Lists out a given number of requests from the user''s submissions. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: approval.GetApprovalListSent
      parameters:
        - name: filter.keyword
          in: query
          description: 'Filter requests whose ID, title, submitter, approvers, recipients match this keyword.'
          schema:
            type: string
        - name: filter.is_bookmarked
          in: query
          description: Filter requests that are starred. Pass `1` to this parameter if you'd like to use this filter.
          schema:
            enum:
              - '0'
              - '1'
            examples:
              - '1'
          examples:
            default:
              value: '1'
        - name: filter.approval_category_ids
          in: query
          description: 'Filter requests by template in use. Pass a comma-delimited list of template IDs. If you want to include requests with no template, add `none` to the list.'
          schema:
            type: string
        - name: filter.start_date
          in: query
          description: Filter requests submitted at or after this datetime. Use the ISO 8601 format in UTC.
          schema:
            type: string
        - name: filter.approval_status
          in: query
          description: |-
            Filter requests whose status matches this setting.
            - `1`: Waiting
            - `2`: Approved
            - `3`: Denied

            You can pass a comma-delimited list of status codes (for example, `1,2`).
          schema:
            type: string
        - name: type
          in: query
          description: |-
            The tab from which to retrieve requests.
            - `me`: **My submissions**
            - `team`: **Circulated to my team**
          schema:
            type: string
        - name: limit
          in: query
          description: The number of requests to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: filter.end_date
          in: query
          description: Filter requests submitted at or after this datetime. Use the ISO 8601 format in UTC.
          schema:
            type: string
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
      responses:
        '200':
          description: Successfully retrieved the requests submitted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ApprovalListResponse'
      security:
        - OAuth2Application:
            - 'approval:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/approval.list.temp:
    get:
      tags:
        - Approval
      summary: List out drafts
      description: 'Lists out a given number of request drafts. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: approval.GetApprovalListTemp
      parameters:
        - name: limit
          in: query
          description: The number of drafts to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
      responses:
        '200':
          description: Successfully retrieved the drafts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ApprovalListResponse'
      security:
        - OAuth2Application:
            - 'approval:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/approval.category.info:
    get:
      tags:
        - Approval
      summary: Get a template's info
      description: Retrieves information about a request template.
      operationId: approval.GetApprovalCategoryInfo
      parameters:
        - name: approval_category_id
          in: query
          description: The ID of the template to view.
          schema:
            type: string
            examples:
              - 211018034560kSKpPY2
          examples:
            default:
              value: 211018034560kSKpPY2
      responses:
        '200':
          description: Successfully retrieved information about the template.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetApprovalCategoryInfoResponse'
      security:
        - OAuth2Application:
            - 'approval:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/approval.category.list:
    get:
      tags:
        - Approval
      summary: List out templates
      description: 'Lists out a given number of request templates. This method uses the Swit API''s [pagination scheme](/docs/core1/up49a503iuknu-pagination-scheme).'
      operationId: approval.GetApprovalCategoryList
      parameters:
        - name: limit
          in: query
          description: The number of objects to retrieve.
          schema:
            type: integer
            examples:
              - 5
          examples:
            default:
              value: 5
        - name: offset
          in: query
          description: Pass the `offset` string returned by the previous call to skip already returned entries.
          schema:
            type: string
            examples:
              - MTUzOTg0NTg2NTAwMA
          examples:
            default:
              value: MTUzOTg0NTg2NTAwMA
      responses:
        '200':
          description: Successfully retrieved the templates.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ApprovalCategoryListResponse'
      security:
        - OAuth2Application:
            - 'approval:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
  /api/organization.user.info:
    get:
      tags:
        - Membership
      summary: Get user information
      description: Retrieves information of a user in the organization.
      operationId: organization.user.info
      parameters:
        - name: user_id
          in: query
          description: The ID of the user to retrieve.
          required: true
          schema:
            type: string
            examples:
              - 230103011810x7bqTRY
      responses:
        '200':
          description: Successfully retrieved the user information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetOrganizationUserListResponse'
      security:
        - OAuth2Application:
            - 'user:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/organization.user.list:
    get:
      tags:
        - Membership
      summary: Get user list
      description: Retrieves a list of users in the organization.
      operationId: organization.user.list
      parameters:
        - name: page
          in: query
          description: The page number for a paginated response.
          schema:
            type: integer
            examples:
              - 5
        - name: team_id
          in: query
          description: The ID of the team to filter users by.
          schema:
            type: string
            examples:
              - 226616073670YuFtWmv
        - name: ws_id
          in: query
          description: The ID of the workspace to filter users by.
          schema:
            type: string
            examples:
              - 2001210215096173faX
        - name: keyword
          in: query
          description: This parameter filters users based on the provided keyword in their names or email addresses.
          schema:
            type: string
            examples:
              - Lydia
        - name: filters.membership_status
          in: query
          description: The membership status to filter the users by.
          schema:
            enum:
              - active
              - inactive
            examples:
              - active
        - name: cnt
          in: query
          description: The number of users to return per page.
          required: true
          schema:
            type: integer
            examples:
              - 10
          examples:
            default:
              value: 10
      responses:
        '200':
          description: Successfully retrieved the user list from the organization.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      total_rows:
                        type: integer
                        examples:
                          - 250
                      users:
                        type: array
                        description: An object wrapping a Swit resource.
                        items:
                          $ref: '#/components/schemas/GetOrganizationUserListResponse'
      security:
        - OAuth2Application:
            - 'user:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/organization.user.create:
    post:
      tags:
        - Membership
      summary: Create a user
      description: Creates a user in the organization.
      operationId: organization.user.create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                language:
                  enum:
                    - en
                    - ko
                  description: The language setting for the user to create.
                timezone:
                  type: string
                  description: The timezone of the user to create.
                  examples:
                    - Asia/Seoul
                user_name:
                  type: string
                  description: The name of the user to create.
                  examples:
                    - Jane Kim
                user_email:
                  type: string
                  description: The email of the user to create.
                  examples:
                    - jane@example.com
                tel:
                  type: string
                  description: The telephone number of the user to create.
                  examples:
                    - +82-10-1234-5678
                msg:
                  type: string
                  description: The status message of the user to create.
                  examples:
                    - Working from home
              required:
                - user_name
                - user_email
      responses:
        '200':
          description: Successfully created the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetOrganizationUserListResponse'
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/user.organization.batchCreate:
    post:
      tags:
        - Membership
      summary: Create guest accounts
      description: |-
        Invites multiple users as guests to the organization.

        > Calling this endpoint to create a user will not trigger an event notification for subscribers to the user creation event.
      operationId: user.organization.batchCreate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCompanyUserListParam'
      responses:
        '201':
          description: Successfully created the guest accounts.
      deprecated: true
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/organization.user.activate:
    post:
      tags:
        - Membership
      summary: Activate a user
      description: Activates a user in an organization.
      operationId: organization.user.activate
      requestBody:
        description: The user to activate.
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: The ID of the user to activate.
                  examples:
                    - 230103011810x7bqTRY
              required:
                - user_id
      responses:
        '204':
          description: No content.
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/organization.user.deactivate:
    post:
      tags:
        - Membership
      summary: Deactivate a user
      description: Deactivates a user in the organization.
      operationId: organization.user.deactivate
      requestBody:
        description: The user to deactivate.
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: The ID of the user to deactivate.
                  examples:
                    - 230103011810x7bqTRY
              required:
                - user_id
      responses:
        '204':
          description: No content.
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/organization.user.remove:
    post:
      tags:
        - Membership
      summary: Delete a user
      description: Deletes a user from the organization.
      operationId: organization.user.remove
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: The ID of the user to delete from the organization.
                  examples:
                    - 200103015310ImIqLWZ
              required:
                - user_id
      responses:
        '200':
          description: Successfully deleted the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DelCompanyUserResponse'
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/user.team.list:
    get:
      tags:
        - Team
      summary: List out teams
      description: 'List out the child teams of a given team. If no parameters are passed, the list of all teams in the organization is given as a response.'
      operationId: user.team.list
      parameters:
        - name: direct_children_only
          in: query
          description: Whether to list out only direct child teams of the given parent.
          schema:
            type: boolean
            examples:
              - true
        - name: parent_id
          in: query
          description: The ID of the parent team.
          schema:
            type: string
            examples:
              - 24567231758btrwFTY
        - name: reference
          in: query
          description: Custom text to be used as a reference. This is useful to store information from another source.
          schema:
            type: string
            examples:
              - '145'
      responses:
        '200':
          description: Successfully retrieved the list of teams.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetUserTeamListResponse'
      security:
        - OAuth2Application:
            - 'user:read'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/team.create:
    post:
      tags:
        - Team
      summary: Create a team
      description: Creates a new team in the organization.
      operationId: team.create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the team to create.
                  examples:
                    - Design
                parent_id:
                  type: string
                  description: 'The ID of the parent team under which the new team will be created.If you want to create a new team directly under the organization, rather than as a sub-team of a specific team within the organization, enter the organization id of the top-level team.'
                  examples:
                    - 24567231758btrwFTY
                reference:
                  type: string
                  description: Custom text to be used as a reference. This is useful to store information from another source.
                  examples:
                    - '145'
              required:
                - name
                - parent_id
      responses:
        '200':
          description: Successfully created the team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TeamCreateResponse'
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/team.update:
    post:
      tags:
        - Team
      summary: Update a team
      description: Updates a team's information including its name and parent team.
      operationId: team.update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the team to update.
                  examples:
                    - 200103015310ImIqLWZ
                reference:
                  type: string
                  description: Custom text to be used as a reference. This is useful to store information from another source.
                  examples:
                    - '145'
                name:
                  type: string
                  description: The name of the team to update.
                  examples:
                    - Design
                parent_id:
                  type: string
                  description: The ID of the new parent team for the team being updated.
                  examples:
                    - 24567231758btrwFTY
              required:
                - id
      responses:
        '200':
          description: Successfully updated the team's information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TeamUpdateResponse'
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/team.delete:
    post:
      tags:
        - Team
      summary: Delete a team
      description: Deletes a team.
      operationId: team.delete
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the team to delete.
                  examples:
                    - 200103015310ImIqLWZ
              required:
                - id
      responses:
        '200':
          description: Successfully deleted the team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TeamDeleteResponse'
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/team.sort:
    post:
      tags:
        - Team
      summary: Sort teams
      description: Sort the child teams of a parent team in a given order.
      operationId: team.sort
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamSortParam'
      responses:
        '200':
          description: Successfully sorted the teams.
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/team.user.add:
    post:
      tags:
        - Team
      summary: Add users to a team
      description: Adds users to a team.
      operationId: team.user.add
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_ids:
                  type: array
                  description: The IDs of the users to add.
                  examples:
                    - - 220327051250T3AfDDu
                      - 220828163440rQVO7Tb
                  items:
                    type: string
                id:
                  type: string
                  description: The ID of the team to add the users to.
                  examples:
                    - 200103015310ImIqLWZ
      responses:
        '200':
          description: Successfully added the users to the selected team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TeamUserCreateResponse'
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/team.user.primary.update:
    post:
      tags:
        - Team
      summary: Update a user's primary team
      description: Updates a user's primary team.
      operationId: team.user.primary.update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the team to designate as the primary team.
                  examples:
                    - 200103015310ImIqLWZ
                user_id:
                  type: string
                  description: The ID of the user.
                  examples:
                    - 2010161727509IJFTiX
              required:
                - id
                - user_id
      responses:
        '200':
          description: Successfully updated the user's primary team.
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
  /api/team.user.remove:
    post:
      tags:
        - Team
      summary: Remove team members
      description: Removes members from a team.
      operationId: team.user.remove
      requestBody:
        description: The members to remove from the team.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the team to remove the members from.
                  examples:
                    - 200103015310ImIqLWZ
                user_ids:
                  type: array
                  description: The IDs of the members to remove.
                  examples:
                    - - 220327051250T3AfDDu
                      - 220828163440rQVO7Tb
                  items:
                    type: string
              required:
                - id
                - user_ids
      responses:
        '200':
          description: Successfully removed the members from the team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TeamUserDeleteResponse'
      security:
        - OAuth2Application:
            - 'admin:write'
      servers:
        - url: 'https://openapi.swit.io/v1'
          description: Production
        - url: 'https://openapi.swit.express/v1'
          description: Stage
        - url: 'https://openapi2.swit.dev/v1'
          description: Development
      x-internal: false
tags:
  - name: User
    description: description
  - name: Workspace
    description: description
  - name: Channel
    description: description
  - name: Message
    description: description
  - name: MessageComment
    description: description
  - name: Idea
    description: description
  - name: IdeaComment
    description: description
  - name: Project
    description: description
  - name: ProjectBucket
    description: description
  - name: Task
    description: description
  - name: TaskChecklist
    description: description
  - name: TaskComment
    description: description
  - name: DirectMessage
    description: description
  - name: Conversation
    description: description
  - name: CustomField
    description: description
  - name: Approval
    description: description
  - name: Membership
    description: description
  - name: Team
    description: description
  - name: Email
    description: description
  - name: Interface
    description: description
  - name: Automation
    description: description
  - name: SecurityCDN
    description: description
  - name: Task-ISC
    description: description
components:
  securitySchemes:
    OAuth2Application:
      type: oauth2
      flows:
        authorizationCode:
          refreshUrl: ''
          authorizationUrl: 'https://openapi.swit.io/oauth/authorize'
          scopes:
            'user:write': 'Edit the authorizing user’s account information, profile, and settings'
            'presence:write': Change the authorizing user’s presence status
            'presence:read': View the authorizing user’s presence status
            'approval:write': 'Edit your organization’s Approvals plug-in settings, and draft and submit approval requests'
            'approval:read': 'View your organization’s Approvals plug-in settings, and view approval requests accessible to the authorizing user'
            'admin:write': 'Edit your organization’s administrative settings, membership and teams'
            'admin:read': 'View your organization’s administrative settings, membership and teams'
            'workspace:write': Create and edit workspaces
            'workspace:read': View information about workspaces
            'user:read': 'View the authorizing user’s account information, profile, and settings'
            'task:write': Create and edit tasks in projects the authorizing user is in
            'task:read': View tasks posted to projects the authorizing user is in
            'project:write': Create and edit projects
            'project:read': View information about projects
            'message:write': Create and edit messages in channels the authorizing user is in
            'message:read': View messages posted to channels the authorizing user is in
            'idea:write': Create and edit ideas in channels the authorizing user is in
            'idea:read': View ideas posted to channels the authorizing user is in
            'channel:write': Create and edit channels
            'channel:read': View information about channels
            'app:install': Add the bot user and extended UI elements for users to interact with the app server
            'store:write': Create and delete event subscriptions for the authorizing user’s account
            'imap:write': Connect to an IMAP server and read email.
            'imap:read': Fetch email details using IMAP.
          tokenUrl: 'https://openapi.swit.io/oauth/token'
  schemas:
    GetUserInfoResponse:
      type: object
      title: GetUserInfoResponse
      description: An object wrapping a Swit resource.
      properties:
        user:
          $ref: '#/components/schemas/UserResponse'
      x-tags:
        - User
    UserResponse:
      type: object
      title: UserResponse
      description: An object wrapping a Swit resource.
      properties:
        cmp_id:
          type: string
          description: The ID of the organization the user is in.
          examples:
            - '19065611325634561'
        color:
          type: string
          description: The background color of the default profile image of the user.
          examples:
            - '#00ff00'
        department:
          type: string
          description: Previously used in the Free/Standard plans to describe the department the user is in.
          examples:
            - backend
          x-deprecated: true
        id:
          type: string
          description: The ID of the user. This is used for the API to identify the user.
          examples:
            - 1908210134210XIiU3W
        language:
          enum:
            - en
            - ko
          description: The language setting of the user.
        name:
          type: string
          description: The username registered.
          examples:
            - sally
        photo:
          type: string
          description: 'The URL path of the profile image, relative to `https://files.swit.io`.'
          examples:
            - /profile/20120211324834567/dawilOPyY6GS3XFdtEQ2y0qy.png
        status:
          type: integer
          description: |-
            Whether the user's membership is active.
            - `0`: Inactive
            - `1`: Active
          examples:
            - 1
        status_msg:
          type: string
          description: The status message the user has left.
          examples:
            - my status
        tel:
          type: string
          description: The phone number of the user.
          examples:
            - +1 222-333-4444
        timezone:
          type: string
          description: The timezone setting of the user.
          examples:
            - America/Los_Angeles
        user_email:
          type: string
          description: The email address of the user.
          examples:
            - jane@example.com
      x-tags:
        - User
    UserPresenceSyncStatusResponse:
      type: object
      title: UserPresenceSyncStatusResponse
      description: An object wrapping a Swit resource.
      properties:
        app_id:
          type: string
          description: The ID of the app that issued the access token passed.
          examples:
            - 200330060739965p5HE
        is_presence_sync_on:
          type: boolean
          description: Whether or not the app is allowed to update the presence sync of the authorizing user.
          examples:
            - true
      x-tags:
        - User
    GetWorkspaceInfoResponse:
      type: object
      title: GetWorkspaceInfoResponse
      description: An object wrapping a Swit resource.
      properties:
        workspace:
          $ref: '#/components/schemas/WorkspaceResponse'
      x-tags:
        - Workspace
    WorkspaceResponse:
      type: object
      title: WorkspaceResponse
      description: An object wrapping a Swit resource.
      properties:
        admin_ids:
          type: array
          description: The user IDs of the workspace administrators.
          examples:
            - - 191120042719809wVlw
              - 190826072741481FcvV
          items:
            type: string
        color:
          type: string
          description: The background color of the default profile image of the workspace.
          examples:
            - '#00ff00'
        created:
          type: string
          description: The date and time at which the workspace was created.
          examples:
            - '2020-02-03T01:31:37Z'
        domain:
          type: string
          description: The domain name of the workspace.
          examples:
            - haileystandard000
        id:
          type: string
          description: The ID of the workspace.
          examples:
            - 2001210215096173faX
        master_id:
          type: string
          description: The user ID of the workspace master.
          examples:
            - 190826072741481FcvV
        name:
          type: string
          description: The name of the workspace.
          examples:
            - haileystandard000
        photo:
          type: string
          description: 'The URL path of the profile image, relative to `https://files.swit.io`.'
          examples:
            - /ws_image/workspace/1kYTjVFD23DFutGA/ws_image/ABcZ3tmJiypQ6123456qWI5kdNQFeVdo_th_500.png
      x-tags:
        - Workspace
    GetWorkspaceListResponse:
      type: object
      title: GetWorkspaceListResponse
      description: An object wrapping a Swit resource.
      properties:
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
        workspaces:
          type: array
          description: Workspaces retrieved.
          items:
            $ref: '#/components/schemas/WorkspaceResponse'
      x-tags:
        - Workspace
    PutWorkspaceParam:
      type: object
      title: PutWorkspaceParam
      properties:
        id:
          type: string
          description: The ID of the workspace to update.
          examples:
            - 2001210215096173faX
        name:
          type: string
          description: The name of the workspace.
          examples:
            - Test WS
      required:
        - id
        - name
      x-tags:
        - Workspace
    PutWorkspaceResponse:
      type: object
      title: PutWorkspaceResponse
      description: An object wrapping a Swit resource.
      properties:
        workspace:
          $ref: '#/components/schemas/WorkspaceResponse'
      x-tags:
        - Workspace
    WorkspaceUserResponse:
      type: object
      title: WorkspaceUserResponse
      properties:
        color:
          type: string
          description: The background color of the default profile image of the user.
          examples:
            - '#00ff00'
        department:
          type: string
          description: The department name of the user.
          examples:
            - backend
        group:
          type: array
          description: The groups the user belongs to.
          items:
            $ref: '#/components/schemas/WsGroup'
        is_admin:
          type: boolean
          description: Whether the user is an administrator of the workspace.
          examples:
            - true
        is_master:
          type: boolean
          description: Whether the user is the master of the workspace.
          examples:
            - false
        joined:
          type: string
          description: The date and time at which the user joined the workspace.
          examples:
            - '2020-02-03T01:31:37Z'
        name:
          type: string
          description: The display name of the user.
          examples:
            - jenny
        photo:
          type: string
          description: 'The URL path of the profile image, relative to `https://files.swit.io`.'
          examples:
            - /profile/20120211324834567/dawilOPyY6GS3XFdtEQ2y0qy.png
        status:
          type: string
          description: Whether the user is active or inactive in the workspace.
          examples:
            - act
        status_msg:
          type: string
          description: The status message the user has left.
          examples:
            - my status
        tel:
          type: string
          description: The phone number of the user.
          examples:
            - +1 222-333-4444
        user_email:
          type: string
          description: The email address of the user.
          readOnly: true
          examples:
            - jane@example.com
        user_id:
          type: string
          description: The ID of the user.
          examples:
            - 191120042719809wVlw
      x-tags:
        - Workspace
    WsGroup:
      type: object
      title: WsGroup
      properties:
        description:
          type: string
          description: The description of the group.
          examples:
            - They are leaders for each part
        grp_name:
          type: string
          description: The name of the group.
          examples:
            - Leaders
        guser_id:
          type: string
          description: The ID of the group.
          examples:
            - '20071408275494179'
        ws_id:
          type: string
          description: The ID of the workspace where the group belongs.
          examples:
            - 7kYTjHXN92FUutGA
      x-tags:
        - Workspace
    GetWorkspaceUserListResponse:
      type: object
      title: GetWorkspaceUserListResponse
      description: An object wrapping a Swit resource.
      properties:
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
        user:
          type: array
          description: User information of each member retrieved.
          items:
            $ref: '#/components/schemas/WorkspaceUserResponse'
      x-tags:
        - Workspace
    AddCompanyWorkspaceInviteParam:
      type: object
      title: AddCompanyWorkspaceInviteParam
      properties:
        id:
          type: string
          description: The ID of the workspace to invite the user to.
          examples:
            - 7kYTjHXN98FUutKL
        user_id:
          type: string
          description: 'The ID of the user to invite to the workspace. (If values are provided for both "user_id" and "user_ids", then "user_ids" will take precedence.)'
          examples:
            - 2010161727509IJFTiX
        user_ids:
          type: array
          description: 'IDs of users to invite to the workspace. (If values are provided for both "user_id" and "user_ids", then "user_ids" will take precedence.)'
          examples:
            - - 2112060056120j8XoA6S
              - 1905312354988s2CwS2A
              - 200205040110mWrxpRT
          items:
            type: string
      required:
        - id
      x-tags:
        - Workspace
    AddCompanyWorkspaceInviteResponse:
      type: object
      title: AddCompanyWorkspaceInviteResponse
      description: An object wrapping a Swit resource.
      x-tags:
        - Workspace
    WorkspaceGroup:
      type: object
      title: WorkspaceGroup
      description: The properties of a group in a workspace.
      properties:
        created:
          type: string
          description: The date and time at which the group was created.
          examples:
            - '2020-07-11T08:28:12Z'
        description:
          type: string
          description: The description of the group.
          examples:
            - Team leaders.
        grp_name:
          type: string
          description: The name of the group.
          examples:
            - Leadership
        guser_id:
          type: string
          description: The ID of the group.
          examples:
            - '20071408275494179'
        status:
          enum:
            - act
            - leave
          description: |-
            The status of the group.

            - `act`: Active channel.
            - `leave`: Deleted channel.            
        user_count:
          type: integer
          description: The number of group members.
          examples:
            - 10
        ws_id:
          type: string
          description: The ID of the workspace where the group belongs.
          examples:
            - 7kPTjHXN98FUutGA
      x-tags:
        - Workspace
    Emoji:
      type: object
      title: Emoji
      description: The properties of a custom emoji.
      properties:
        created:
          type: string
          description: The date and time at which the custom emoji was created.
          examples:
            - '2023-01-02T16:35:53.58012Z'
        emoji_id:
          type: string
          description: The ID of the custom emoji.
          examples:
            - 230101163540spKxT3g
        name:
          type: string
          description: The name of the custom emoji.
          examples:
            - helloswitty
        path:
          type: string
          description: 'The image path of the custom emoji. This path is relative to `https://files.swit.io`.'
          examples:
            - /v2/workspace/2210140701188923AcB/emoji/230308163540B6yudw4.png
        user_id:
          type: string
          description: The ID of the user who created the custom emoji.
          examples:
            - 221038491090jTdMSn1
        ws_id:
          type: string
          description: The ID of The workspace where the custom emoji was created.
          examples:
            - 2210040701188923AcB
      x-tags:
        - Workspace
    GetChannelResponse:
      type: object
      title: GetChannelResponse
      description: An object wrapping a Swit resource.
      properties:
        channel:
          $ref: '#/components/schemas/ChannelResponse'
      x-tags:
        - Channel
    ChannelResponse:
      type: object
      title: ChannelResponse
      description: An object wrapping a Swit resource.
      properties:
        created:
          type: string
          description: The date and time at which the channel was created.
          examples:
            - '2020-03-14T05:00:07Z'
        description:
          type: string
          description: Description on the purpose of the channel.
          examples:
            - This channel is for team-wide communication and announcements. All team members are in this channel.
        host_id:
          type: string
          description: The ID of the host of the channel.
          examples:
            - 1908210134210XIiU3W
        id:
          type: string
          description: The ID of the channel.
          examples:
            - 200314050007273CcYa
        is_archived:
          type: boolean
          description: Whether the channel is archived.
          examples:
            - false
        is_member:
          type: boolean
          description: Whether the user joined the channel.
          examples:
            - true
        is_prev_chat_visible:
          type: boolean
          description: Whether the channel discloses previous messages to new members.
          examples:
            - true
        is_private:
          type: boolean
          description: Whether the channel is private.
          examples:
            - false
        is_starred:
          type: boolean
          description: Whether the channel is starred by the user.
          examples:
            - false
        name:
          type: string
          description: The name of the channel.
          examples:
            - Marketing channel
        type:
          type: string
          description: |-
            Type of the channel.

            - `dfl`: The channel is the default chat room joined by all workspace members.
            - `gen`: The channel is an additionally created group chat.
          examples:
            - dfl
      x-tags:
        - Channel
    GetChannelListResponse:
      type: object
      title: GetChannelListResponse
      description: An object wrapping a Swit resource.
      properties:
        channels:
          type: array
          description: Details of each channel retrieved.
          items:
            $ref: '#/components/schemas/ChannelResponse'
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
      x-tags:
        - Channel
    AddChannelParam:
      type: object
      title: AddChannelParam
      properties:
        description:
          type: string
          description: The description on the purpose of the channel.
          examples:
            - This is a channel for the marketing team.
        is_prev_chat_visible:
          type: boolean
          description: Whether to disclose previous messages to new members.
          examples:
            - true
        is_private:
          type: boolean
          description: Whether to keep the channel private.
          default: false
          examples:
            - false
        name:
          type: string
          description: The name of the channel.
          examples:
            - Marketing channel
        workspace_id:
          type: string
          description: The ID of the workspace where to create the channel.
          examples:
            - 2002130601276977jqA
      required:
        - name
        - workspace_id
      x-tags:
        - Channel
    AddChannelResponse:
      type: object
      title: AddChannelResponse
      description: An object wrapping a Swit resource.
      properties:
        channel:
          $ref: '#/components/schemas/ChannelResponse'
      x-tags:
        - Channel
    PutChannelParam:
      type: object
      title: PutChannelParam
      properties:
        description:
          type: string
          description: The description or purpose of the channel.
          examples:
            - This is the channel's description.
        id:
          type: string
          description: The ID of the channel.
          examples:
            - '20020409515949841'
        is_prev_chat_visible:
          type: boolean
          description: Whether to disclose previous messages to new members.
          examples:
            - true
        name:
          type: string
          description: The name of the channel.
          examples:
            - Marketing channel
        update_fields:
          type: array
          description: The fields to update for the channel.
          examples:
            - - name
              - description
              - is_prev_chat_visible
          items:
            type: string
      required:
        - id
      x-tags:
        - Channel
    PutChannelResponse:
      type: object
      title: PutChannelResponse
      description: An object wrapping a Swit resource.
      properties:
        channel:
          $ref: '#/components/schemas/ChannelResponse'
      x-tags:
        - Channel
    GetChannelUserListResponse:
      type: object
      title: GetChannelUserListResponse
      description: An object wrapping a Swit resource.
      properties:
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
        users:
          type: array
          description: The information of users retrieved.
          items:
            $ref: '#/components/schemas/ChannelUserResponse'
      x-tags:
        - Channel
    ChannelUserResponse:
      type: object
      title: ChannelUserResponse
      properties:
        id:
          type: string
          description: The user ID of the member.
          examples:
            - 1908210134210XIiU3W
        name:
          type: string
          description: The display name of the member.
          examples:
            - sally
      x-tags:
        - Channel
    AddChannelUserInviteParam:
      type: object
      title: AddChannelUserInviteParam
      properties:
        id:
          type: string
          description: The ID of the channel to invite the users to.
          examples:
            - 200211072219662AoSt
        user_ids:
          type: array
          description: The IDs of the users to invite.
          examples:
            - - 190826072741481FcvV
              - 220327051250T3AfDDu
          items:
            type: string
      required:
        - id
        - user_ids
      x-tags:
        - Channel
    DelChannelUserParam:
      type: object
      title: DelChannelUserParam
      properties:
        ch_id:
          type: string
          description: The ID of the channel to remove the users from.
          examples:
            - 200211072219662AoSt
        user_ids:
          type: array
          description: The IDs of the users to remove.
          examples:
            - - 190826072741481FcvV
              - 220327051250T3AfDDu
          items:
            type: string
      required:
        - ch_id
        - user_ids
      x-tags:
        - Channel
    UpdateChannelArchiveParam:
      type: object
      title: UpdateChannelArchiveParam
      properties:
        archive:
          type: boolean
          description: Whether to archive (`true`) or unarchive (`false`) the channel.
          examples:
            - true
        id:
          type: string
          description: The ID of the channel to archive or unarchive.
          examples:
            - 200211072219662AoSt
      required:
        - id
      x-tags:
        - Channel
    Message:
      type: object
      title: Message
      description: The properties of a message.
      properties:
        assets:
          type: array
          description: File attachments to the message.
          items:
            $ref: '#/components/schemas/ExternalAssetInfo'
        attachments:
          $ref: '#/components/schemas/Attachments'
        channel_id:
          type: string
          description: The ID of the channel.
          examples:
            - 200330060739965p5HE
        comment_count:
          type: integer
          description: The number of comments added.
          examples:
            - 3
        content:
          type: string
          description: The content of the message.
          examples:
            - chatting
        created:
          type: string
          description: The date and time at which the message was created.
          examples:
            - '2020-03-14T05:00:07Z'
        message_id:
          type: string
          description: The ID of the message.
          examples:
            - 2004010524012355f16
        user_id:
          type: string
          description: The ID of the user who created the message.
          examples:
            - 1908210134210XIiU3W
        user_name:
          type: string
          description: The display name of the user who created the message.
          examples:
            - sally
      x-tags:
        - Message
    ExternalAssetInfo:
      type: object
      title: ExternalAssetInfo
      properties:
        file_desc:
          type: string
          description: The description of the file.
          examples:
            - This is my image file.
          x-deprecated: true
        file_mime:
          type: string
          description: The MIME type of the file.
          examples:
            - image
        file_name:
          type: string
          description: The name of the file.
          examples:
            - my_image.png
        file_path:
          type: string
          description: The URL path of the file.
          examples:
            - 'https://files.swit.io/workspace/5kASjQWE98FUvrGA/232312112730zaAQgdV/232312112730LviVDKj.png'
        file_size:
          type: integer
          description: The size of the file in bytes.
          examples:
            - 6232
        thumbnail:
          type: string
          description: The Thumbnail URL of the file.
          examples:
            - 'https://files.swit.io/workspace/5kASjQWE98FUvrGA/232312112730zaAQgdV/232312112730LviVDKj_SWIT512.png'
      x-tags:
        - Task
    Attachments:
      type: array
      description: |-
        List of data attachments to the message.

        Refer to the [AttachmentView](/docs/user-actions/ref/schemas/attachment-view) section for more details. 

        When making a request with this property, only `attachment_type=custom` is allowed.
      items:
        type: object
        properties:
          attachment_type:
            enum:
              - custom
              - chat
              - task
              - mail
              - calendar
              - og
            description: 'The type of the attachment. Note that when making a request, only `custom` is allowed as a value.'
          values:
            type: array
            description: The contents of the attachment.
            examples:
              - - header:
                    app_id: 221213015310hXj6FN8
                    title: This is a view title
                    subtitle: Add a subtitle if needed
                  body:
                    elements:
                      - type: divider
                  footer:
                    buttons:
                      - type: button
                        label: Close
                        style: primary_filled
                        static_action:
                          action_type: close_view
            items:
              type: object
      x-tags:
        - Message
    GetMessageListResponse:
      type: object
      title: GetMessageListResponse
      description: An object wrapping a Swit resource.
      properties:
        messages:
          type: array
          description: Details of each message retrieved.
          items:
            $ref: '#/components/schemas/Message'
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
      x-tags:
        - Message
    CreateMessageParam:
      type: object
      title: CreateMessageParam
      properties:
        assets:
          type: array
          description: File attachments to the message.
          items:
            $ref: '#/components/schemas/ExternalAssetInfo'
        attachments:
          $ref: '#/components/schemas/Attachments'
        body_type:
          enum:
            - plain
            - json_string
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          default: plain
        channel_id:
          type: string
          description: The ID of the channel where to create the message.
          examples:
            - 191206013943685DslC
        content:
          type: string
          description: The content of the message.
          examples:
            - This is a message.
        external_asset_type:
          enum:
            - google_drive
            - gcp_storage
          description: |-
            The storage type of the attached file.
            - `google_drive`: Google Drive files.
            - `gcp_storage`: All other types of files.            
      required:
        - channel_id
        - content
      x-tags:
        - Message
    CreateMessageResponse:
      type: object
      title: CreateMessageResponse
      description: An object wrapping a Swit resource.
      properties:
        message:
          $ref: '#/components/schemas/Message'
      x-tags:
        - Message
    CreateMessageFromMailResponse:
      type: object
      title: CreateMessageFromMailResponse
      description: An object wrapping a Swit resource.
      properties:
        message:
          type: object
          description: The properties of a message.
          properties:
            channel_id:
              type: string
              description: The ID of the channel the email was shared.
              examples:
                - 200330060739965p5HE
            created:
              type: string
              description: The date and time at which the email was shared.
              examples:
                - '2020-03-14T05:00:07Z'
            message_id:
              type: string
              description: The ID of the message.
              examples:
                - 2004010524012355f16
      x-tags:
        - Message
    DeleteMessageParam:
      type: object
      title: DeleteMessageParam
      properties:
        id:
          type: string
          description: The ID of the message.
          examples:
            - 21080607597093STYhd
      required:
        - id
      x-tags:
        - Message
    AddMessageReactionParam:
      type: object
      title: AddMessageReactionParam
      properties:
        message_id:
          type: string
          description: The ID of the message to react to.
          examples:
            - 21080607597093STYhd
        reaction_name:
          type: string
          description: 'The alias of the reaction emoji surrounded by a preceding and a trailing '':'' symbol. Get the whole list of available emojis and their aliases from https://github.com/github/gemoji/blob/master/db/emoji.json.'
          examples:
            - ':joy:'
      required:
        - message_id
        - reaction_name
      x-tags:
        - Message
    AddMessageReactionResponse:
      type: object
      title: AddMessageReactionResponse
      description: An object wrapping a Swit resource.
      x-tags:
        - Message
    DelMessageReactionParam:
      type: object
      title: DelMessageReactionParam
      properties:
        message_id:
          type: string
          description: The ID of the message to remove the reaction emoji from.
          examples:
            - 21080607597093STYhd
        reaction_name:
          type: string
          description: 'The alias of the reaction emoji surrounded by a preceding and a trailing '':'' symbol. Get the whole list of available emojis and their aliases from https://github.com/github/gemoji/blob/master/db/emoji.json.'
          examples:
            - ':joy:'
      required:
        - message_id
        - reaction_name
      x-tags:
        - Message
    GetMessageCommentListResponse:
      type: object
      title: GetMessageCommentListResponse
      description: An object wrapping a Swit resource.
      properties:
        comments:
          type: array
          description: Details of each comment retrieved.
          items:
            $ref: '#/components/schemas/Comment'
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
      x-tags:
        - MessageComment
    Comment:
      type: object
      title: Comment
      description: The properties for a comment.
      properties:
        assets:
          type: array
          description: File attachments to the comment.
          items:
            $ref: '#/components/schemas/ExternalAssetInfo'
        comment_id:
          type: string
          description: The ID of the comment.
          examples:
            - 200401052521746EFE3
        content:
          type: string
          description: The content of the comment.
          examples:
            - Idea comment
        created:
          type: string
          description: The date and time at which the comment was posted.
          examples:
            - '2020-03-14T05:00:07Z'
        user_id:
          type: string
          description: The ID of the user who posted the comment.
          examples:
            - 2004010524012355f16
        user_name:
          type: string
          description: The display name of the user who posted the comment.
          examples:
            - sally
      x-tags:
        - MessageComment
    CreateMessageCommentParam:
      type: object
      title: CreateMessageCommentParam
      properties:
        assets:
          $ref: '#/components/schemas/ExternalAssetInfo'
          description: File attachments to the message comment.
        body_type:
          enum:
            - plain
            - json_string
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          default: plain
        content:
          type: string
          description: The content of the comment.
          examples:
            - This is a comment.
        external_asset_type:
          enum:
            - google_drive
            - gcp_storage
          description: |-
            The storage type of the attached file.
            - `google_drive`: Google Drive files.
            - `gcp_storage`: All other types of files.            
        message_id:
          type: string
          description: The ID of the message to comment on.
          examples:
            - 21080607597093STYhd
      required:
        - content
        - message_id
      x-tags:
        - MessageComment
    CreateMessageCommentResponse:
      type: object
      title: CreateMessageCommentResponse
      description: An object wrapping a Swit resource.
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
      x-tags:
        - MessageComment
    DeleteMessageCommentParam:
      type: object
      title: DeleteMessageCommentParam
      properties:
        id:
          type: string
          description: The ID of the comment.
          examples:
            - 210807140621i9YYZ1u
      required:
        - id
      x-tags:
        - MessageComment
    GetIdeaResponse:
      type: object
      title: GetIdeaResponse
      description: An object wrapping a Swit resource.
      properties:
        idea:
          $ref: '#/components/schemas/Idea'
      x-tags:
        - Idea
    Idea:
      type: object
      title: Idea
      description: The properties of an idea.
      properties:
        assets:
          type: array
          description: File attachments to the idea.
          items:
            $ref: '#/components/schemas/ExternalAssetInfo'
        channel_id:
          type: string
          description: The ID of the channel.
          examples:
            - 200330060739965p5HE
        comment_count:
          type: integer
          description: The number of comments added.
          examples:
            - 3
        content:
          type: string
          description: The content of the idea.
          examples:
            - idea content
        created:
          type: string
          description: The date and time at which the idea was created.
          examples:
            - '2020-03-14T05:00:07Z'
        idea_id:
          type: string
          description: The ID of the idea.
          examples:
            - 2004010524012355f16
        user_id:
          type: string
          description: The ID of the user who created the idea.
          examples:
            - 1908210134210XIiU3W
        user_name:
          type: string
          description: The display name of the user who created the idea.
          examples:
            - sally
      x-tags:
        - Idea
    GetIdeaListResponse:
      type: object
      title: GetIdeaListResponse
      description: An object wrapping a Swit resource.
      properties:
        ideas:
          type: array
          description: Details of each post retrieved.
          items:
            $ref: '#/components/schemas/Idea'
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
      x-tags:
        - Idea
    CreateIdeaParam:
      type: object
      title: CreateIdeaParam
      properties:
        assets:
          $ref: '#/components/schemas/ExternalAssetInfo'
          description: File attachments to the idea.
        body_type:
          enum:
            - plain
            - json_string
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          default: plain
        channel_id:
          type: string
          description: The ID of the channel where to create the idea.
          examples:
            - 201027126104712l114
        content:
          type: string
          description: The content of the idea.
          examples:
            - This is a idea.
        external_asset_type:
          enum:
            - google_drive
            - gcp_storage
          description: |-
            The storage type of the attached file.
            - `google_drive`: Google Drive files.
            - `gcp_storage`: All other types of files.            
      required:
        - channel_id
        - content
      x-tags:
        - Idea
    CreateIdeaResponse:
      type: object
      title: CreateIdeaResponse
      description: An object wrapping a Swit resource.
      properties:
        idea:
          $ref: '#/components/schemas/Idea'
      x-tags:
        - Idea
    DelIdeaParam:
      type: object
      title: DelIdeaParam
      properties:
        idea_id:
          type: string
          description: The ID of the idea.
          examples:
            - 2004010524012355f16
      required:
        - idea_id
      x-tags:
        - Idea
    AddIdeaReactionParam:
      type: object
      title: AddIdeaReactionParam
      properties:
        idea_id:
          type: string
          description: The ID of idea to react to.
          examples:
            - 21080344042039BrlBU
        reaction_name:
          type: string
          description: 'The alias of the reaction emoji surrounded by a preceding and a trailing '':'' symbol. Get the whole list of available emojis and their aliases from https://github.com/github/gemoji/blob/master/db/emoji.json.'
          examples:
            - ':joy:'
      required:
        - idea_id
        - reaction_name
      x-tags:
        - Idea
    AddIdeaReactionResponse:
      type: object
      title: AddIdeaReactionResponse
      description: An object wrapping a Swit resource.
      x-tags:
        - Idea
    DelIdeaReactionParam:
      type: object
      title: DelIdeaReactionParam
      properties:
        idea_id:
          type: string
          description: The ID of the idea to remove the reaction emoji from.
          examples:
            - 21080344042039BrlBU
        reaction_name:
          type: string
          description: 'The alias of the reaction emoji surrounded by a preceding and a trailing '':'' symbol. Get the whole list of available emojis and their aliases from https://github.com/github/gemoji/blob/master/db/emoji.json.'
          examples:
            - ':joy:'
      required:
        - idea_id
        - reaction_name
      x-tags:
        - Idea
    GetIdeaCommentListResponse:
      type: object
      title: GetIdeaCommentListResponse
      description: An object wrapping a Swit resource.
      properties:
        comments:
          type: array
          description: Details of each comment retrieved.
          items:
            $ref: '#/components/schemas/Comment'
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
      x-tags:
        - IdeaComment
    CreateIdeaCommentParam:
      type: object
      title: CreateIdeaCommentParam
      properties:
        assets:
          $ref: '#/components/schemas/ExternalAssetInfo'
          description: File attachments to the idea comment.
        body_type:
          enum:
            - plain
            - json_string
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          default: plain
        content:
          type: string
          description: The content of the comment.
          examples:
            - This is a comment.
        external_asset_type:
          enum:
            - google_drive
            - gcp_storage
          description: |-
            The storage type of the attached file.
            - `google_drive`: Google Drive files.
            - `gcp_storage`: All other types of files.            
        idea_id:
          type: string
          description: The ID of the idea to comment on.
          examples:
            - 21080607597093STYhd
      required:
        - content
        - idea_id
      x-tags:
        - IdeaComment
    CreateIdeaCommentResponse:
      type: object
      title: CreateIdeaCommentResponse
      description: An object wrapping a Swit resource.
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
      x-tags:
        - IdeaComment
    DelIdeaCommentParam:
      type: object
      title: DelIdeaCommentParam
      properties:
        id:
          type: string
          description: The ID of the comment.
          examples:
            - 210807140621i9YYZ1u
      required:
        - id
      x-tags:
        - IdeaComment
    GetProjectInfoResponse:
      type: object
      title: GetProjectInfoResponse
      description: An object wrapping a Swit resource.
      properties:
        project:
          $ref: '#/components/schemas/ProjectResponse'
      required:
        - project
      x-tags:
        - Project
    ProjectResponse:
      type: object
      title: ProjectResponse
      description: An object wrapping a Swit resource.
      properties:
        created:
          type: string
          description: The date and time at which the project was created.
          examples:
            - '2020-03-14T05:00:07Z'
        description:
          type: string
          description: Description on the purpose of the project.
          examples:
            - This is the project's description.
        host_id:
          type: string
          description: The user ID of the host of the project.
          examples:
            - 1908210134210XIiU3W
        id:
          type: string
          description: The ID of the project.
          examples:
            - 200211072219662AoSt
        is_archived:
          type: boolean
          description: Whether the project is archived.
          examples:
            - false
        is_member:
          type: boolean
          description: Whether the user joined the project.
          examples:
            - true
        is_private:
          type: boolean
          description: Whether the project is private.
          examples:
            - false
        is_starred:
          type: boolean
          description: Whether the project is starred by the user.
          examples:
            - false
        name:
          type: string
          description: The name of the project.
          examples:
            - This is a name.
      x-tags:
        - Project
    GetProjectListResponse:
      type: object
      title: GetProjectListResponse
      description: An object wrapping a Swit resource.
      properties:
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
        projects:
          type: array
          description: Details of each project retrieved.
          items:
            $ref: '#/components/schemas/ProjectResponse'
      x-tags:
        - Project
    AddProjectParam:
      type: object
      title: AddProjectParam
      properties:
        description:
          type: string
          description: Description on the purpose of the project.
          examples:
            - This is the project's description.
        is_private:
          type: boolean
          description: Whether to keep the project private.
          default: false
          examples:
            - false
        name:
          type: string
          description: The name of the project.
          examples:
            - This is a name.
        workspace_id:
          type: string
          description: The ID of the workspace where to create the project.
          examples:
            - 2001210215096173faX
      required:
        - name
        - workspace_id
      x-tags:
        - Project
    AddProjectResponse:
      type: object
      title: AddProjectResponse
      description: An object wrapping a Swit resource.
      properties:
        project:
          $ref: '#/components/schemas/ProjectResponse'
      required:
        - project
      x-tags:
        - Project
    PutProjectParam:
      type: object
      title: PutProjectParam
      properties:
        description:
          type: string
          description: Description on the purpose of the project.
          examples:
            - This is the project's description.
        id:
          type: string
          description: The ID of the project.
          examples:
            - 200211072219662AoSt
        name:
          type: string
          description: The name of the project.
          examples:
            - This is a name.
        update_fields:
          type: array
          description: The fields to update.
          examples:
            - - name
              - description
          items:
            type: string
      required:
        - id
      x-tags:
        - Project
    PutProjectResponse:
      type: object
      title: PutProjectResponse
      description: An object wrapping a Swit resource.
      properties:
        project:
          $ref: '#/components/schemas/ProjectResponse'
      required:
        - project
      x-tags:
        - Project
    UpdateProjectArchiveParam:
      type: object
      title: UpdateProjectArchiveParam
      properties:
        archive:
          type: boolean
          description: Whether to archive (`true`) or unarchive (`false`) the project.
          examples:
            - true
        id:
          type: string
          description: The ID of the project to archive or unarchive.
          examples:
            - 200211072219662AoSt
      required:
        - id
      x-tags:
        - Project
    GetProjectUserListResponse:
      type: object
      title: GetProjectUserListResponse
      description: An object wrapping a Swit resource.
      properties:
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
        users:
          type: array
          description: User information of each member retrieved.
          items:
            $ref: '#/components/schemas/ProjectUserResponse'
      x-tags:
        - Project
    ProjectUserResponse:
      type: object
      title: ProjectUserResponse
      properties:
        id:
          type: string
          description: The user ID of the member.
          examples:
            - 1908210134210XIiU3W
        name:
          type: string
          description: The display name of the member.
          examples:
            - sally
      x-tags:
        - Project
    GetProjectTagListResponse:
      type: object
      title: GetProjectTagListResponse
      description: An object wrapping a Swit resource.
      properties:
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
        projectTags:
          type: array
          description: Details of each tag retrieved.
          items:
            $ref: '#/components/schemas/ProjectTagResponse'
      x-tags:
        - Project
    ProjectTagResponse:
      type: object
      title: ProjectTagResponse
      properties:
        created:
          type: string
          description: The date and time at which the tag was created.
          examples:
            - '2020-02-03T01:31:37Z'
        tag_data:
          type: string
          description: The content of the tag.
          examples:
            - 4Q
        tag_id:
          type: string
          description: The ID of the tag.
          examples:
            - 200314050007273CcYa
      x-tags:
        - Project
    StatusCustom:
      type: object
      title: StatusCustom
      description: A custom status.
      properties:
        color_label:
          type: string
          description: The color label associated with the status.
          examples:
            - LIGHT_GRAY
        status_attribute:
          type: string
          description: |-
            The attribute associated with the status:

            - `NOT_STARTED`: The task is in the Backlog.
            - `DONE`: The task is in the "Done" status.
            - `IN_PROGRESS`: The task is in any other status.
          examples:
            - IN_PROGRESS
        status_id:
          type: string
          description: The ID of the status.
          examples:
            - 220704893496H2gs32H
        status_name:
          type: string
          description: The name of the status.
          examples:
            - To Do
      x-tags:
        - Task
    GetProjectBucketInfoResponse:
      type: object
      title: GetProjectBucketInfoResponse
      description: An object wrapping a Swit resource.
      properties:
        bucket:
          $ref: '#/components/schemas/BucketResponse'
      x-tags:
        - ProjectBucket
    BucketResponse:
      type: object
      title: BucketResponse
      description: An object wrapping a Swit resource.
      properties:
        created:
          type: string
          description: The date and time at which the bucket was created.
          examples:
            - '2020-03-14T05:00:07Z'
        id:
          type: string
          description: The ID of the bucket.
          examples:
            - 2002130601276977jqA
        name:
          type: string
          description: The title of the bucket.
          examples:
            - This is a bucket
        project_id:
          type: string
          description: The ID of the project where to add the bucket.
          examples:
            - 2002172358144856FyQ
      x-tags:
        - ProjectBucket
    GetProjectBucketListResponse:
      type: object
      title: GetProjectBucketListResponse
      description: An object wrapping a Swit resource.
      properties:
        buckets:
          type: array
          description: Details of each bucket retrieved.
          items:
            $ref: '#/components/schemas/BucketResponse'
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
      x-tags:
        - ProjectBucket
    AddProjectBucketParam:
      type: object
      title: AddProjectBucketParam
      properties:
        name:
          type: string
          description: The title of the bucket.
          examples:
            - This is a bucket
        project_id:
          type: string
          description: The ID of the project where to add the bucket.
          examples:
            - 2002130601276977jqA
      required:
        - name
        - project_id
      x-tags:
        - ProjectBucket
    AddProjectBucketResponse:
      type: object
      title: AddProjectBucketResponse
      description: An object wrapping a Swit resource.
      properties:
        bucket:
          $ref: '#/components/schemas/BucketResponse'
      x-tags:
        - ProjectBucket
    PutProjectBucketParam:
      type: object
      title: PutProjectBucketParam
      properties:
        id:
          type: string
          description: The ID of the bucket to update.
          examples:
            - 2002172358144856FyQ
        name:
          type: string
          description: New title for the bucket.
          examples:
            - This is a bucket
      required:
        - id
        - name
      x-tags:
        - ProjectBucket
    PutProjectBucketResponse:
      type: object
      title: PutProjectBucketResponse
      description: An object wrapping a Swit resource.
      properties:
        bucket:
          $ref: '#/components/schemas/BucketResponse'
      x-tags:
        - ProjectBucket
    GetTaskInfoResponse:
      type: object
      title: GetTaskInfoResponse
      description: An object wrapping a Swit resource.
      properties:
        task:
          $ref: '#/components/schemas/TaskResponse'
      x-tags:
        - Task
    TaskResponse:
      type: object
      title: TaskResponse
      description: An object wrapping a Swit resource.
      properties:
        assets:
          type: array
          description: File attachments to the task.
          items:
            $ref: '#/components/schemas/ExternalAssetInfo'
        assign:
          type: string
          description: |-
            **`Deprecated`**. Use `assignees` instead.

            The user ID of the assignee of the task. If not assigned, it returns `unassign`.
          examples:
            - 1908210134210XIiU3W
          x-deprecated: true
        assignees:
          type: array
          description: The user IDs of the assignees of the task.
          examples:
            - - 190826072741481FcvV
              - 220327051250T3AfDDu
          items:
            type: string
        bucket_id:
          type: string
          description: The ID of the bucket under which the task is placed.
          examples:
            - 190910095434996oSgI
        color:
          enum:
            - '#f03621'
            - '#f76363'
            - '#ff8b00'
            - '#ffbf00'
            - '#8ac917'
            - '#5a9216'
            - '#00c7cf'
            - '#478bff'
            - '#1d5ecc'
            - '#8f0099'
            - '#7e828e'
          description: The color assigned to the task.
          examples:
            - '#f03621'
        comment_count:
          type: integer
          description: The number of comments added.
          examples:
            - 3
        content:
          type: string
          description: The content of the task.
          examples:
            - This is a content.
        end_date:
          type: string
          description: Date scheduled to finish the task.
          examples:
            - '2020-04-30'
        follow:
          type: array
          description: The user IDs of the collaborators on the task.
          examples:
            - - 1908210134210XIiU3W
              - 220327051250T3AfDDu
              - 2004180101103cUipk3
              - 1911020715193IHKLX
          items:
            type: string
        id:
          type: string
          description: The ID of the task.
          examples:
            - 190910100433344Dtjf
        isTime:
          type: boolean
          description: 'Whether the start or due time, including the specific time of day, is set for the task.'
          examples:
            - true
        priority:
          type: string
          description: Priority set for the task.
          examples:
            - Normal
        project_id:
          type: string
          description: The ID of the project that contains the task.
          examples:
            - 190910080935239ZRI5
        rich_text:
          type: boolean
          description: Whether or not allows the user to customize the way text looks.
          default: false
        start_date:
          type: string
          description: Date scheduled to start the task.
          examples:
            - '2020-04-01'
        status:
          type: string
          description: |-
            **`Deprecated`**. Use `status_custom` instead.

            Current status of the task:

            - `ToDo`: The task is in the "To Do" status.
            - `Doing`: The task is in the "Doing" status.
            - `Done`: The task is in the "Done" status.
            - **null**: The task is in the "Backlog" status.
          examples:
            - ToDo
          x-deprecated: true
        status_custom:
          $ref: '#/components/schemas/StatusCustom'
        title:
          type: string
          description: The title of the task.
          examples:
            - This is a title.
        user_id:
          type: string
          description: The ID of the user who created the task.
          examples:
            - '19081502534623670'
        parent_id:
          type: string
          description: The ID of the parent task.
          examples:
            - 1207810100433344Dtjy
        subtask_count:
          type: string
          description: The number of subtasks the given task has.
          examples:
            - '3'
      x-tags:
        - Task
    GetTaskListProjectResponse:
      type: object
      title: GetTaskListProjectResponse
      description: An object wrapping a Swit resource.
      properties:
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
        tasks:
          type: array
          description: Details of each task retrieved.
          items:
            $ref: '#/components/schemas/TaskResponse'
      x-tags:
        - Task
    GetTaskListByColumnResponse:
      type: object
      title: GetTaskListByColumnResponse
      description: An object wrapping a Swit resource.
      properties:
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
        tasks:
          type: array
          description: Details of each task retrieved.
          items:
            $ref: '#/components/schemas/TaskResponse'
      x-tags:
        - Task
    GetTaskListMineResponse:
      type: object
      title: GetTaskListMineResponse
      description: An object wrapping a Swit resource.
      properties:
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
        tasks:
          type: array
          description: Details of each task retrieved.
          items:
            $ref: '#/components/schemas/TaskResponse'
      x-tags:
        - Task
    AddTaskParam:
      type: object
      title: AddTaskParam
      properties:
        assets:
          type: array
          description: File attachments to the task.
          items:
            $ref: '#/components/schemas/ExternalAssetInfo'
        assign:
          type: string
          description: The user ID of the member to whom to assign the task.
          examples:
            - 1908210134210XIiU3W
        body_type:
          enum:
            - plain
            - json_string
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          default: plain
        bucket_id:
          type: string
          description: The ID of the bucket the task is in.
          examples:
            - 2202172358144856AE1
        color:
          enum:
            - '#f03621'
            - '#f76363'
            - '#ff8b00'
            - '#ffbf00'
            - '#8ac917'
            - '#5a9216'
            - '#00c7cf'
            - '#478bff'
            - '#1d5ecc'
            - '#8f0099'
            - '#7e828e'
          description: Color assigned to the task.
          examples:
            - '#f03621'
        content:
          type: string
          description: The content of the task.
          examples:
            - test content
        create_type:
          type: string
          description: |-
            Where the task is created from.
            - `B`: Backlog
            - `M`: My tasks
            - `C`: Bucket
            - `ALL`: Assignee & status
            - `A`: Assignee
            - `S`: Status
          examples:
            - ALL
          x-deprecated: true
        end_date:
          type: string
          description: Date by which the task will end. Use the `YYYY-MM-DD` format.
          examples:
            - '2019-02-28'
        external_asset_type:
          enum:
            - google_drive
            - gcp_storage
          description: |-
            The storage type of the attached file.
            - `google_drive`: Google Drive files.
            - `gcp_storage`: All other types of files.            
        follow:
          type: string
          description: The ID(s) of the member(s) to collaborate in the task.
          examples:
            - '1908210134210XIiU3W,1908210134210XI3029'
        priority:
          type: string
          description: Priority to set for the task.
          examples:
            - Normal
        project_id:
          type: string
          description: The ID of the project where to post the task.
          examples:
            - 2002172358144856FyQ
        start_date:
          type: string
          description: Date on which the task starts. Use the `YYYY-MM-DD` format.
          examples:
            - '2019-01-30'
        step:
          type: string
          description: |-
            **`Deprecated`**. Update the status using `api/task.status.update` instead.

            Status of the task:

            - `ToDo`: Set the task's status to "To Do".
            - `Doing`: Set the task's status to "Doing".
            - `Done`: Set the task's status to "Done".

            If not passed, the status is set to Backlog by default.
          examples:
            - ToDo
          x-deprecated: true
        tag:
          type: string
          description: The tag associated with the task.
          readOnly: true
          examples:
            - '18113006130145890GI,1811300613014589205'
        title:
          type: string
          description: The title of the task.
          examples:
            - This is a title
        workspace_id:
          type: string
          description: The ID of the workspace that includes the target project. Only required when `mytask` is passed to the `project_id` parameter (for a Personal task).
          examples:
            - 200403011733309Yiti
      required:
        - project_id
        - title
      x-tags:
        - Task
    AddTaskResponse:
      type: object
      title: AddTaskResponse
      description: An object wrapping a Swit resource.
      properties:
        task:
          $ref: '#/components/schemas/TaskResponse'
      x-tags:
        - Task
    DelTaskParam:
      type: object
      title: DelTaskParam
      properties:
        id:
          type: string
          description: The ID of the task.
          examples:
            - 200302045745598izpK
      required:
        - id
      x-tags:
        - Task
    MoveTaskParam:
      type: object
      title: MoveTaskParam
      properties:
        assign:
          type: boolean
          description: Whether to include the assignee.
          examples:
            - true
        follow:
          type: boolean
          description: Whether to include the collaborators.
          examples:
            - true
        id:
          type: string
          description: The ID of the task to move.
          examples:
            - 190910100433344Dtjf
        target_bucket_id:
          type: string
          description: The ID of the destination bucket.
          examples:
            - 190910095434996oSgI
        target_project_id:
          type: string
          description: The ID of the destination project.
          examples:
            - 190910080935239ZRI5
      required:
        - id
        - target_project_id
      x-tags:
        - Task
    MoveTaskResponse:
      type: object
      title: MoveTaskResponse
      description: An object wrapping a Swit resource.
      properties:
        task:
          $ref: '#/components/schemas/TaskResponse'
      x-tags:
        - Task
    PutTaskParam:
      type: object
      title: PutTaskParam
      properties:
        assets:
          type: array
          description: File attachments to the task.
          items:
            $ref: '#/components/schemas/ExternalAssetInfo'
        assign:
          type: string
          description: The user ID of the member to whom to assign the task.
          readOnly: true
          examples:
            - 1908210134210XIiU3W
        body_type:
          enum:
            - plain
            - json_string
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          default: plain
        bucket_id:
          type: string
          description: The ID of the bucket the task is in.
          examples:
            - 2202172358144856AE1
        color:
          enum:
            - '#f03621'
            - '#f76363'
            - '#ff8b00'
            - '#ffbf00'
            - '#8ac917'
            - '#5a9216'
            - '#00c7cf'
            - '#478bff'
            - '#1d5ecc'
            - '#8f0099'
            - '#7e828e'
          description: Color assigned to the task.
          examples:
            - '#f03621'
        content:
          type: string
          description: The content of the task.
          examples:
            - test content
        end_date:
          type: string
          description: Date by which the task will end. Use the `YYYY-MM-DD` format.
          examples:
            - '2019-02-28'
        external_asset_type:
          enum:
            - google_drive
            - gcp_storage
          description: |-
            The storage type of the attached file.
            - `google_drive`: Google Drive files.
            - `gcp_storage`: All other types of files.            
        follow:
          type: string
          description: The ID of the collabolators.
          readOnly: true
          examples:
            - 1908210134210XIiU3W
        id:
          type: string
          description: The ID of the task.
          examples:
            - 190910100433344Dtjf
        priority:
          type: string
          description: Priority to set for the task.
          examples:
            - Normal
        start_date:
          type: string
          description: Date on which the task starts. Use the `YYYY-MM-DD` format.
          examples:
            - '2019-01-30'
        step:
          type: string
          description: |-
            Status of the task:

            - `ToDo`: Set the task's status to "To Do".
            - `Doing`: Set the task's status to "Doing".
            - `Done`: Set the task's status to "Done".
          examples:
            - ToDo
        tag:
          type: string
          description: The tag of the task.
          readOnly: true
          examples:
            - 18113006130145890GI
        title:
          type: string
          description: The title of the task.
          examples:
            - This is a title
      required:
        - id
      x-tags:
        - Task
    PutTaskResponse:
      type: object
      title: PutTaskResponse
      description: An object wrapping a Swit resource.
      properties:
        task:
          $ref: '#/components/schemas/TaskResponse'
      x-tags:
        - Task
    AddTaskAssigneeParam:
      type: object
      title: AddTaskAssigneeParam
      properties:
        task_id:
          type: string
          description: The ID of the task.
          examples:
            - 190910100433344Dtjf
        user_id:
          type: string
          description: 'The user ID of the assignee. If both user_id and user_ids parameters are entered, priority is applied based on the value of the user_id parameter.(user_id랑 user_ids에 모두 값이 들어가 있으면, user_ids 기준으로 적용됨)'
          examples:
            - '19081502534623670'
        user_ids:
          type: array
          description: 'User IDs of assignees. If both user_id and user_ids parameters are entered, priority is applied based on the value of the user_id parameter. (user_id랑 user_ids에 모두 값이 들어가 있으면, user_ids 기준으로 적용됨)'
          examples:
            - - 2112060056120j8XoA6S
              - 1905312354988s2CwS2A
              - 200205040110mWrxpRT
          items:
            type: string
      required:
        - task_id
      x-tags:
        - Task
    AddTaskAssigneeResponse:
      type: object
      title: AddTaskAssigneeResponse
      description: An object wrapping a Swit resource.
      properties:
        assignee_id:
          type: string
          description: The user ID of the assignee.
          examples:
            - '19081502534623670'
        assignee_ids:
          type: array
          description: User IDs of assignees.
          examples:
            - - 2112060056120j8XoA6S
              - 1905312354988s2CwS2A
              - 200205040110mWrxpRT
          items:
            type: string
      x-tags:
        - Task
    DelTaskAssigneeParam:
      type: object
      title: DelTaskAssigneeParam
      properties:
        task_id:
          type: string
          description: The ID of the task.
          examples:
            - 200305090347079ssCJ
        user_id:
          type: string
          description: The ID of the member.
          examples:
            - '19081502534623670'
      required:
        - task_id
        - user_id
      x-tags:
        - Task
    AddTaskFollowParam:
      type: object
      title: AddTaskFollowParam
      properties:
        task_id:
          type: string
          description: The ID of the task.
          examples:
            - 200305090347079ssCJ
        user_id:
          type: string
          description: 'The user ID of the collaborator. If both user_id and user_ids parameters are entered, priority is applied based on the value of the user_id parameter.(user_id랑 user_ids에 모두 값이 들어가 있으면, user_ids 기준으로 적용됨)'
          examples:
            - '19081502534623670'
        user_ids:
          type: array
          description: 'User IDs of collaborators. If both user_id and user_ids parameters are entered, priority is applied based on the value of the user_id parameter. (user_id랑 user_ids에 모두 값이 들어가 있으면, user_ids 기준으로 적용됨)'
          examples:
            - - 2112060056120j8XoA6S
              - 1905312354988s2CwS2A
              - 200205040110mWrxpRT
          items:
            type: string
      required:
        - task_id
      x-tags:
        - Task
    AddTaskFollowResponse:
      type: object
      title: AddTaskFollowResponse
      description: An object wrapping a Swit resource.
      properties:
        follower_id:
          type: array
          description: The user IDa of the collaborator.
          examples:
            - - '19081502534623670'
              - 2001210215096173faX
          items:
            type: string
      x-tags:
        - Task
    DelTaskFollowParam:
      type: object
      title: DelTaskFollowParam
      properties:
        task_id:
          type: string
          description: The ID of the task.
          examples:
            - 200305090347079ssCJ
        user_id:
          type: string
          description: The user ID of the collaborator.
          examples:
            - '19081502534623670'
      required:
        - task_id
        - user_id
      x-tags:
        - Task
    AppendAssetTaskParam:
      type: object
      title: AppendAssetTaskParam
      properties:
        assets:
          type: array
          description: File attachments to the task.
          items:
            $ref: '#/components/schemas/ExternalAssetInfo'
        external_asset_type:
          enum:
            - google_drive
            - gcp_storage
          description: |-
            The storage type of the attached file.
            - `google_drive`: Google Drive files.
            - `gcp_storage`: All other types of files.            
        id:
          type: string
          description: The ID of the task.
          examples:
            - 221031071570KNs6NFX
        workspace_id:
          type: string
          description: The ID of the workspace.
          examples:
            - 200403011733309Yiti
      required:
        - id
      x-tags:
        - Task
    AddTaskCheckListParam:
      type: object
      title: AddTaskCheckListParam
      properties:
        content:
          type: string
          description: The content of the checklist item.
          examples:
            - This is a check list
        task_id:
          type: string
          description: The ID of the task where to add the checklist item.
          examples:
            - 190910100433344Dtjf
      required:
        - content
        - task_id
      x-tags:
        - TaskChecklist
    AddTaskCheckListResponse:
      type: object
      title: AddTaskCheckListResponse
      description: An object wrapping a Swit resource.
      properties:
        taskChecklist:
          $ref: '#/components/schemas/TaskChecklistResponse'
      x-tags:
        - TaskChecklist
    TaskChecklistResponse:
      type: object
      title: TaskChecklistResponse
      description: An object wrapping a Swit resource.
      properties:
        content:
          type: string
          description: The content of the checklist item.
          examples:
            - This is a check list
        created:
          type: string
          description: The date and time at which the checklist item was created.
          examples:
            - '2020-03-14T05:00:07Z'
        id:
          type: string
          description: The ID of the checklist item.
          examples:
            - '20031316413609430'
        is_complete:
          type: boolean
          description: Whether the checklist item is complete.
          examples:
            - true
        task_id:
          type: string
          description: The ID of the task.
          examples:
            - 190910100433344Dtjf
        user_id:
          type: string
          description: The ID of the user who added the checklist item.
          examples:
            - 1908210134210XIiU3W
      x-tags:
        - TaskChecklist
    GetTaskCheckListResponse:
      type: object
      title: GetTaskCheckListResponse
      description: An object wrapping a Swit resource.
      properties:
        taskChecklist:
          $ref: '#/components/schemas/TaskChecklistResponse'
      x-tags:
        - TaskChecklist
    GetTaskCheckListListResponse:
      type: object
      title: GetTaskCheckListListResponse
      description: An object wrapping a Swit resource.
      properties:
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
        taskChecklists:
          type: array
          description: Details of each checklist item retrieved.
          items:
            $ref: '#/components/schemas/TaskChecklistResponse'
      x-tags:
        - TaskChecklist
    DelTaskCheckListParam:
      type: object
      title: DelTaskCheckListParam
      properties:
        id:
          type: string
          description: The ID of the checklist.
          examples:
            - '20031316413609430'
      required:
        - id
      x-tags:
        - TaskChecklist
    PutTaskCheckListParam:
      type: object
      title: PutTaskCheckListParam
      properties:
        content:
          type: string
          description: The content of the checklist item.
          examples:
            - todo2
        id:
          type: string
          description: The ID of the checklist item.
          examples:
            - '20031316413609430'
        is_complete:
          type: boolean
          description: Whether the checklist item is complete.
          examples:
            - true
        update_fields:
          type: array
          description: The fields to update.
          examples:
            - - content
              - is_complete
          items:
            type: string
            examples:
              - '["content", "is_complete"]'
      required:
        - id
      x-tags:
        - TaskChecklist
    PutTaskCheckListResponse:
      type: object
      title: PutTaskCheckListResponse
      description: An object wrapping a Swit resource.
      properties:
        taskChecklist:
          $ref: '#/components/schemas/TaskChecklistResponse'
      x-tags:
        - TaskChecklist
    AddTaskCommentParam:
      type: object
      title: AddTaskCommentParam
      properties:
        assets:
          type: array
          description: File attachments to the task.
          items:
            $ref: '#/components/schemas/ExternalAssetInfo'
        body_type:
          enum:
            - plain
            - json_string
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          default: plain
        content:
          type: string
          description: The content of the comment.
          examples:
            - This is a comment.
        external_asset_type:
          enum:
            - google_drive
            - gcp_storage
          description: |-
            The storage type of the attached file.
            - `google_drive`: Google Drive files.
            - `gcp_storage`: All other types of files.            
        task_id:
          type: string
          description: The ID of the task to comment on.
          examples:
            - 200305090347079ssCJ
      required:
        - content
        - task_id
      x-tags:
        - TaskComment
    AddTaskCommentResponse:
      type: object
      title: AddTaskCommentResponse
      description: An object wrapping a Swit resource.
      properties:
        taskComment:
          $ref: '#/components/schemas/TaskCommentResponse'
      x-tags:
        - TaskComment
    TaskCommentResponse:
      type: object
      title: TaskCommentResponse
      description: An object wrapping a Swit resource.
      properties:
        assets:
          type: array
          description: File attachments to the task.
          items:
            $ref: '#/components/schemas/ExternalAssetInfo'
        content:
          type: string
          description: The content of the comment.
          examples:
            - This is comment.
        created:
          type: string
          description: The date and time at which the comment was posted.
          examples:
            - '2020-03-14T05:00:07Z'
        id:
          type: string
          description: The ID of the comment.
          examples:
            - '19081502534611123'
        rich_text:
          type: boolean
          description: Whether or not allows the user to customize the way text looks.
          default: true
        task_id:
          type: string
          description: The ID of the task.
          examples:
            - 190910100433344Dtjf
        user_id:
          type: string
          description: The ID of the user who posted the comment.
          examples:
            - 1908210134210XIiU3W
        user_name:
          type: string
          description: The display name of the user who posted the comment.
          examples:
            - sally
      x-tags:
        - TaskComment
    GetTaskCommentResponse:
      type: object
      title: GetTaskCommentResponse
      description: An object wrapping a Swit resource.
      properties:
        content:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
        taskComments:
          type: array
          description: Details of each comment retrieved.
          items:
            $ref: '#/components/schemas/TaskCommentResponse'
      x-tags:
        - TaskComment
    DelTaskCommentParam:
      type: object
      title: DelTaskCommentParam
      description: An object wrapping a Swit resource.
      properties:
        assets:
          type: array
          description: File attachments to the task.
          items:
            $ref: '#/components/schemas/ExternalAssetInfo'
        id:
          type: string
          description: The ID of the comment.
          examples:
            - 23051905593794H788S9
      x-tags:
        - TaskComment
    PutTaskCommentParam:
      type: object
      title: PutTaskCommentParam
      properties:
        assets:
          type: array
          description: File attachments to the task.
          items:
            $ref: '#/components/schemas/ExternalAssetInfo'
        body_type:
          enum:
            - plain
            - json_string
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          default: plain
        content:
          type: string
          description: The content of the comment.
          examples:
            - This is a comment.
        external_asset_type:
          enum:
            - google_drive
            - gcp_storage
          description: |-
            The storage type of the attached file.
            - `google_drive`: Google Drive files.
            - `gcp_storage`: All other types of files.            
        id:
          type: string
          description: The ID of the comment to edit.
          examples:
            - '19081502534611123'
      required:
        - content
        - id
      x-tags:
        - TaskComment
    PutTaskCommentResponse:
      type: object
      title: PutTaskCommentResponse
      description: An object wrapping a Swit resource.
      properties:
        taskComment:
          $ref: '#/components/schemas/TaskCommentResponse'
      x-tags:
        - TaskComment
    GetContentsResponse:
      type: object
      title: GetContentsResponse
      description: An object wrapping a Swit resource.
      properties:
        contents:
          $ref: '#/components/schemas/Contents'
      x-tags:
        - DirectMessage
    Contents:
      type: object
      title: Contents
      description: An object wrapping a Swit resource.
      properties:
        attachments:
          $ref: '#/components/schemas/Attachments'
        body_blockskit:
          type: object
          description: An object representing the content of the post in rich text.
          examples:
            - elements:
                - elements:
                    - content: This is a message.
                      type: rt_text
                  type: rt_section
              type: rich_text
        body_text:
          type: string
          description: The content of the post in plaintext.
          examples:
            - Hi  <@channel>
        child_cnt:
          type: integer
          description: The number of the comments added to the post.
          examples:
            - 3
        contents_id:
          type: string
          description: The ID of the post.
          examples:
            - f23b95a423d12cbadfcc211cf9441a6b
        contents_type:
          type: string
          description: |-
            The type of the post.
            - `chat`: Message or chat message
            - `cmt`: Comment
            - `system`: System message
          examples:
            - chat
        created:
          type: string
          description: The date and time at which the post was created.
          examples:
            - '2021-11-05T05:28:19.498530457Z'
        is_bookmark:
          type: boolean
          description: Whether or not the post is bookmarked.
          examples:
            - false
        is_delete:
          type: boolean
          description: Whether or not the post has been deleted.
          examples:
            - false
        is_pin:
          type: boolean
          description: Whether or not the post is pinned.
          examples:
            - false
        modified:
          type: string
          description: The date and time at which the request was last edited.
          examples:
            - '2021-11-15T07:00:29.826312711Z'
        offset:
          type: string
          description: The ID of the entry last returned by the previous call.
          examples:
            - 4ed761ba080a4489a86077a9d3b7ffcl
        parent_id:
          type: string
          description: 'When the current post is a comment on another post, this parameter indicates the main post''s ID.'
          examples:
            - a43e3575aaef55b9b4cacf9f7d283c19
        properties:
          type: object
          description: The client information.
          properties:
            client_id:
              type: string
              description: The ID of the client.
              examples:
                - 37da0ade-67f3-4bf7-9c4d-fc3b4c285918
            is_outcome:
              type: boolean
              description: Whether the message is an announcement.
              default: false
        reactions:
          type: array
          description: Emoji reactions that have been added to the post.
          items:
            $ref: '#/components/schemas/ReactionInfo'
        room_id:
          type: string
          description: The ID of the chat that contains the post.
          examples:
            - f27c95a387d14cacbfbb209cf9451a6a
        share_data:
          type: object
          description: 5_274_bfd'
          x-deprecated: true
        user_id:
          type: string
          description: The ID of the user who created the post.
          examples:
            - 210345045640BupYNgD
      x-tags:
        - DirectMessage
    ReactionInfo:
      type: object
      title: ReactionInfo
      properties:
        count:
          type: integer
          description: The number of reactions using the emoji.
          examples:
            - 1
        users:
          type: array
          description: The people who reacted using the emoji.
          examples:
            - - 1908210134210XIiU3W
          items:
            type: string
        value:
          type: string
          description: The name of the emoji.
          examples:
            - ':grinning:'
      x-tags:
        - DirectMessage
    GetContentsListResponse:
      type: object
      title: GetContentsListResponse
      description: An object wrapping a Swit resource.
      properties:
        contents:
          type: array
          description: Details of each post retrieved.
          items:
            $ref: '#/components/schemas/Contents'
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
      x-tags:
        - DirectMessage
    CreateContentsParam:
      type: object
      title: CreateContentsParam
      properties:
        assets:
          type: array
          description: The ID of the attachment to include in the post.
          items:
            type: string
            examples:
              - 9fga2f871d164cf08f1c6353c159203c
        body:
          type: string
          description: 'The content of the post. If `body_type=json_string` is passed, it must be a string converted from a JSON object representing a rich-formatted text *(We''ll add guidelines on how to construct a rich-text object soon)*.'
          examples:
            - This is a message.
        body_type:
          enum:
            - plain
            - json_string
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          default: plain
        parent_id:
          type: string
          description: Pass the main post's ID if you're to add a comment to a main post.
          examples:
            - 757e01165f9c2345b3bc12d4f681eece
        room_id:
          type: string
          description: The ID of the chat where to create the post.
          examples:
            - 57c53edc06d34beabab209d2e2dfedca
      required:
        - room_id
      x-tags:
        - DirectMessage
    CreateContentsResponse:
      type: object
      title: CreateContentsResponse
      description: An object wrapping a Swit resource.
      properties:
        contents:
          $ref: '#/components/schemas/Contents'
      x-tags:
        - DirectMessage
    UpdateContentsParam:
      type: object
      title: UpdateContentsParam
      properties:
        body:
          type: string
          description: 'The content of the post. If `body_type=json_string` is passed, it must be a string converted from a JSON object representing a rich-formatted text *(We''ll add guidelines on how to construct a rich-text object soon)*.'
          examples:
            - This is an edited message.
        body_type:
          enum:
            - plain
            - json_string
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          default: plain
        contents_id:
          type: string
          description: The ID of the post.
          examples:
            - f23b95a423d12cbadfcc211cf9441a6b
        room_id:
          type: string
          description: The ID of the chat that contains the post.
          examples:
            - f27c95a387d14cacbfbb209cf9451a6a
      required:
        - contents_id
        - room_id
      x-tags:
        - DirectMessage
    UpdateContentsResponse:
      type: object
      title: UpdateContentsResponse
      description: An object wrapping a Swit resource.
      properties:
        contents:
          $ref: '#/components/schemas/Contents'
      x-tags:
        - DirectMessage
    DeleteContentsParam:
      type: object
      title: DeleteContentsParam
      properties:
        contents_id:
          type: string
          description: The ID of the post to delete.
          examples:
            - f23b95a423d12cbadfcc211cf9441a6b
        room_id:
          type: string
          description: The ID of the chat that contains the post.
          examples:
            - f27c95a387d14cacbfbb209cf9451a6a
      required:
        - contents_id
        - room_id
      x-tags:
        - DirectMessage
    DeleteContentsResponse:
      type: object
      title: DeleteContentsResponse
      description: An object wrapping a Swit resource.
      properties:
        contents_id:
          type: string
          description: The ID of the post.
          examples:
            - f23b95a423d12cbadfcc211cf9441a6b
      x-tags:
        - DirectMessage
    GetRoomResponse:
      type: object
      title: GetRoomResponse
      description: An object wrapping a Swit resource.
      properties:
        room:
          $ref: '#/components/schemas/Room'
      x-tags:
        - Conversation
    Room:
      type: object
      title: Room
      description: The properties of a chat.
      properties:
        contents:
          $ref: '#/components/schemas/Contents'
        created:
          type: string
          description: The date and time at which the chat was created.
          examples:
            - '2021-11-05T05:35:12.132037571Z'
        direct_user_id:
          type: string
          description: 'ID of the other user in the 1:1 chat. Only used when the response contains `room_type=direct message`.'
          examples:
            - 210812024837TPzs5dx
        is_hidden:
          type: boolean
          description: Whether or not the chat is hidden by the user.
          examples:
            - false
        is_starred:
          type: boolean
          description: Whether or not the post is starred.
          examples:
            - false
        last_read:
          type: string
          description: The date and time at which the user last read the content in the chat.
          examples:
            - '2021-11-05T07:23:65.322037456Z'
        member_count:
          type: integer
          description: The number of the members of the chat.
          examples:
            - 2
        members:
          type: array
          description: The IDs of the users who are in the chat.
          examples:
            - - 211012345140tFASxVA
              - 211012345040G3HK5b4
          items:
            type: string
        push_type:
          type: string
          description: |-
            The push notification preference set for this chat.
            - `everything`: Receive push notifications for all relevant events.
            - `mentions`: Receive push notifications for mentions relevant to the user.
            - `nothing`: Do not receive push notifications.
          examples:
            - everything
        room_id:
          type: string
          description: The ID of the chat.
          examples:
            - f27c95a387d14cacbfbb209cf9451a6a
        room_name:
          type: string
          description: The name of the chat visible to the user.
          examples:
            - Conversation with my team
        room_type:
          type: string
          description: |-
            The type of the chat.
            - `group message`: Group chat
            - `direct message`: 1:1 chat
          examples:
            - direct message
        status:
          type: string
          description: Whether or not the chat is active.
          examples:
            - active
        unread_count:
          type: integer
          description: The number of the messages the user has not read.
          examples:
            - 1
      x-tags:
        - Conversation
    GetRoomListResponse:
      type: object
      title: GetRoomListResponse
      description: An object wrapping a Swit resource.
      properties:
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
        rooms:
          type: array
          description: Details of each chat retrieved.
          items:
            $ref: '#/components/schemas/Room'
      x-tags:
        - Conversation
    CreateRoomParam:
      type: object
      title: CreateRoomParam
      properties:
        invite_users:
          type: array
          description: The members to invite to the chat.
          examples:
            - - 211012345140tFASxVA
              - 211012345040G3HK5b4
          items:
            type: string
      required:
        - invite_users
      x-tags:
        - Conversation
    CreateRoomResponse:
      type: object
      title: CreateRoomResponse
      description: An object wrapping a Swit resource.
      properties:
        room:
          $ref: '#/components/schemas/Room'
      x-tags:
        - Conversation
    UpdateRoomParam:
      type: object
      title: UpdateRoomParam
      properties:
        name:
          type: string
          description: The name of the chat that will be visible to the user.
          examples:
            - Conversation with my team
        room_id:
          type: string
          description: The ID of the chat.
          examples:
            - f27c95a387d14cacbfbb209cf9451a6a
      required:
        - name
        - room_id
      x-tags:
        - Conversation
    UpdateRoomResponse:
      type: object
      title: UpdateRoomResponse
      description: An object wrapping a Swit resource.
      properties:
        room:
          $ref: '#/components/schemas/Room'
      x-tags:
        - Conversation
    LeaveRoomParam:
      type: object
      title: LeaveRoomParam
      properties:
        room_id:
          type: string
          description: The ID of the chat.
          examples:
            - f27c95a387d14cacbfbb209cf9451a6a
      required:
        - room_id
      x-tags:
        - Conversation
    LeaveRoomResponse:
      type: object
      title: LeaveRoomResponse
      description: An object wrapping a Swit resource.
      properties:
        room_id:
          type: string
          description: The ID of the chat.
          examples:
            - f27c95a387d14cacbfbb209cf9451a6a
      x-tags:
        - Conversation
    InviteRoomParam:
      type: object
      title: InviteRoomParam
      properties:
        invite_users:
          type: array
          description: The IDs of the users to invite.
          examples:
            - - 211012345140tFASxVA
              - 211012345040G3HK5b4
          items:
            type: string
        room_id:
          type: string
          description: The ID of the chat.
          examples:
            - f27c95a387d14cacbfbb209cf9451a6a
      required:
        - invite_users
        - room_id
      x-tags:
        - Conversation
    InviteRoomResponse:
      type: object
      title: InviteRoomResponse
      description: An object wrapping a Swit resource.
      properties:
        room:
          $ref: '#/components/schemas/Room'
      x-tags:
        - Conversation
    GetCustomFieldListResponse:
      type: object
      title: GetCustomFieldListResponse
      description: An object wrapping a Swit resource.
      properties:
        custom_fields:
          type: array
          description: Details of each custom field retrieved.
          items:
            $ref: '#/components/schemas/CustomField'
      x-tags:
        - CustomField
    CustomField:
      type: object
      title: CustomField
      description: The properties of a custom field.
      properties:
        cmp_id:
          type: string
          description: The ID of the organization.
          examples:
            - '19065611325634561'
        created:
          type: string
          description: The date and time at which the custom field was created.
          examples:
            - '2022-04-15T05:13:48.713593Z'
        custom_field_id:
          type: string
          description: The ID of the custom field.
          examples:
            - 220478011220RvcEaXB
        custom_field_options:
          type: array
          description: Array of selections if the field type is dropdown (`field_type=OPTION`).
          items:
            $ref: '#/components/schemas/CustomFieldOption'
        description:
          type: string
          description: The placeholder for the custom field if the field type is text (`field_type=STRING`) or URL (`field_type=URL`).
          examples:
            - Write something.
        edit_role:
          enum:
            - ADMIN
            - MEMBER
          description: |-
            Who can update the field's value:
            - `ADMIN`: The organization's admins can update the field's value for each member.
            - `MEMBER`: Each member can update the field's value for their own profile.
          examples:
            - ADMIN
        enabled:
          type: boolean
          description: Whether the field is set to be displayed on user profiles.
          examples:
            - true
        field_domain:
          const: USER
          description: The type of custom fields used.
        field_name:
          type: string
          description: The name of the custom field.
          examples:
            - Work type
        field_type:
          enum:
            - STRING
            - URL
            - OPTION
          description: 'The type of the custom field: `STRING`, `URL`, or `OPTION` (dropdown).'
          examples:
            - URL
        modified:
          type: string
          description: The date and time at which the custom field was last updated.
          examples:
            - '2022-04-16T03:12:22.12345Z'
      x-tags:
        - CustomField
    CustomFieldOption:
      type: object
      title: CustomFieldOption
      properties:
        created:
          type: string
          description: The date and time at which the dropdown selection was created.
          examples:
            - '2022-04-15T02:22:32.44444Z'
        custom_field_id:
          type: string
          description: The ID of the dropdown field that contains this selection.
          examples:
            - 220478011220RvcEaXB
        custom_field_option_id:
          type: string
          description: The ID of the dropdown selection.
          examples:
            - 220509123480GqLyfoB
        modified:
          type: string
          description: The date and time at which the dropdown selection was created.
          examples:
            - '2022-04-15T02:22:52.13322Z'
        option_name:
          type: string
          description: The name of the dropdown selection.
          examples:
            - Remote
      x-tags:
        - CustomField
    AddCustomFieldParam:
      type: object
      title: AddCustomFieldParam
      properties:
        custom_field_elements:
          type: array
          description: Array of selections if the field type is dropdown (`field_type=OPTION`).
          items:
            $ref: '#/components/schemas/CustomFieldOptionElement'
        description:
          type: string
          description: The placeholder for the custom field if the field type is text (`field_type=STRING`) or URL (`field_type=URL`).
          examples:
            - Write something.
        edit_role:
          enum:
            - ADMIN
            - MEMBER
          description: |-
            Who can update the field's value:
            - `ADMIN`: The organization's admins can update the field's value for each member.
            - `MEMBER`: Each member can update the field's value for their own profile.
          examples:
            - ADMIN
        enabled:
          type: boolean
          description: Whether to display the field on user profiles. Up to five fields can be set to be displayed.
          examples:
            - true
        field_name:
          type: string
          description: The name of the custom field.
          examples:
            - Work type
        field_type:
          enum:
            - STRING
            - URL
            - OPTION
          description: 'Type of the custom field: `STRING`, `URL`, or `OPTION` (dropdown).'
          examples:
            - OPTION
      required:
        - edit_role
        - enabled
        - field_name
        - field_type
      x-tags:
        - CustomField
    CustomFieldOptionElement:
      type: object
      title: CustomFieldOptionElement
      properties:
        option_name:
          enum:
            - STRING
            - URL
            - OPTION
          description: The name of the dropdown selection.
          examples:
            - URL
      required:
        - option_name
      x-tags:
        - CustomField
    AddCustomFieldResponse:
      type: object
      title: AddCustomFieldResponse
      description: An object wrapping a Swit resource.
      properties:
        custom_field:
          $ref: '#/components/schemas/CustomField'
      x-tags:
        - CustomField
    DeleteCustomFieldParam:
      type: object
      title: DeleteCustomFieldParam
      properties:
        custom_field_id:
          type: string
          description: The ID of the custom field to delete.
          examples:
            - 220478011220RvcEaXB
      required:
        - custom_field_id
      x-tags:
        - CustomField
    DeleteCustomFieldResponse:
      type: object
      title: DeleteCustomFieldResponse
      description: An object wrapping a Swit resource.
      properties:
        custom_field_id:
          type: string
          description: The ID of the deleted custom field.
          examples:
            - 220478011220RvcEaXB
      x-tags:
        - CustomField
    UpdateCustomFieldParam:
      type: object
      title: UpdateCustomFieldParam
      properties:
        custom_field_id:
          type: string
          description: The ID of the custom field to update.
          examples:
            - 220478011220RvcEaXB
        edit_role:
          enum:
            - ADMIN
            - MEMBER
          description: |-
            Who can update the field's value on individual members' user profiles.
            - `ADMIN`: Admins can update the field's value on any member's profile.
            - `MEMBER`: Members can update the field's value on their own profile.
          examples:
            - ADMIN
        enabled:
          type: boolean
          description: Whether to display the field on user profiles. Up to five fields can be set to be displayed.
          examples:
            - true
      required:
        - custom_field_id
      x-tags:
        - CustomField
    UpdateCustomFieldResponse:
      type: object
      title: UpdateCustomFieldResponse
      description: An object wrapping a Swit resource.
      properties:
        custom_field:
          $ref: '#/components/schemas/CustomField'
      x-tags:
        - CustomField
    GetUserCustomFieldListResponse:
      type: object
      title: GetUserCustomFieldListResponse
      description: An object wrapping a Swit resource.
      properties:
        joined_custom_fields:
          type: array
          description: Details of each custom field assigned for the user.
          items:
            $ref: '#/components/schemas/JoinedCustomField'
      x-tags:
        - CustomField
    JoinedCustomField:
      type: object
      title: JoinedCustomField
      properties:
        custom_field:
          $ref: '#/components/schemas/CustomField'
        custom_field_user_data:
          $ref: '#/components/schemas/CustomFieldUserData'
      x-tags:
        - CustomField
    CustomFieldUserData:
      type: object
      title: CustomFieldUserData
      description: An object wrapping a Swit resource.
      properties:
        created:
          type: string
          description: The date and time at which the custom field's value was initially assigned for the user.
          examples:
            - '2022-04-15T02:22:32.44444Z'
        custom_field_id:
          type: string
          description: The ID of the custom field.
          examples:
            - 220478011220RvcEaXB
        custom_field_user_data_id:
          type: string
          description: 'The ID of the custom field data assigned for the user. Once created, it will remain unchanged even if the value is updated later.'
          examples:
            - 220509123480GqLyfoB
        data_value:
          type: string
          description: The custom field value assigned for the user.
          examples:
            - Remote
        enabled:
          type: boolean
          description: Whether the custom field is used for this user.
          examples:
            - true
        modified:
          type: string
          description: The date and time at which the custom field value was last updated.
          examples:
            - '2022-04-15T02:22:52.13322Z'
        user_id:
          type: string
          description: The ID of the user.
          examples:
            - 1908210134210XIiU3W
      x-tags:
        - CustomField
    UpdateUserCustomFieldParam:
      type: object
      title: UpdateUserCustomFieldParam
      properties:
        custom_field_user_data_elements:
          type: array
          description: Array of custom field objects to update for the selected user.
          items:
            $ref: '#/components/schemas/CustomFieldUserDataElement'
        update_fields:
          type: array
          description: The fields to update.
          items:
            enum:
              - data_value
              - enabled
        user_id:
          type: string
          description: The ID of the user to update with the selected custom fields.
          examples:
            - 1908210134210XIiU3W
      required:
        - custom_field_user_data_elements
        - user_id
      x-tags:
        - CustomField
    CustomFieldUserDataElement:
      type: object
      title: CustomFieldUserDataElement
      properties:
        custom_field_id:
          type: string
          description: The ID of the target custom field.
          examples:
            - 220478011220RvcEaXB
        data_value:
          type: string
          description: The value of the custom field to assign for the user.
          examples:
            - Remote
        enabled:
          type: boolean
          description: Whether to user the custom field for the user.
          examples:
            - true
      required:
        - custom_field_id
      x-tags:
        - CustomField
    UpdateUserCustomFieldResponse:
      type: object
      title: UpdateUserCustomFieldResponse
      description: An object wrapping a Swit resource.
      properties:
        custom_field_ids:
          type: array
          description: Array of the custom fields updated for the user.
          items:
            $ref: '#/components/schemas/CustomFieldIds'
      x-tags:
        - CustomField
    CustomFieldIds:
      type: object
      title: CustomFields
      properties:
        custom_field_id:
          type: string
          description: The ID of the custom field.
          examples:
            - 220478011220RvcEaXB
        custom_field_user_data_id:
          type: string
          description: The ID of the user updated with the selected custom field.
          examples:
            - 220509123480GqLyfoB
      x-tags:
        - CustomField
    CreateApprovalParam:
      type: object
      title: CreateApprovalParam
      properties:
        approval_category_id:
          type: string
          description: The ID of the template used.
          examples:
            - 139gj12p3o9gwrogn94
        approvers:
          type: array
          description: Approvers for each level.
          items:
            $ref: '#/components/schemas/Approvers'
        body_type:
          enum:
            - plain
            - json_string
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          default: plain
        contents:
          type: string
          description: 'The content of the request. If `body_type=json_string` is passed, it must be a string converted from a JSON object representing a rich-formatted text (We’ll add guidelines on how to construct a rich-text object soon).'
          examples:
            - contents
        html_content:
          type: string
          description: HTML content that will be attached to the request. Note that only the inline `style` attribute is allowed for each individual element and the `<style>` tag is not supported here.
          examples:
            - <body><div></div></body>
        is_public:
          type: integer
          description: |-
            To whom this request is to be circulated after approved.
            - `0`: None
            - `1`: The submitter's teams
            - `2`: The approvers' teams
            - `3`: Both the submitter's & approvers' teams
          examples:
            - 1
        referrer_teams:
          type: array
          description: The IDs of the recipient teams.
          examples:
            - - 201103015310ImIqLWY
              - 220127051250T3AfDYo
          items:
            type: string
        referrers:
          type: array
          description: The user IDs who're CC'd to the request.
          examples:
            - - 1907070715193FXPDT
              - 202201010410mWrxpRT
          items:
            type: string
        title:
          type: string
          description: The title of the request.
          examples:
            - A new project plan
      required:
        - contents
        - title
      x-tags:
        - Approval
    Approvers:
      type: object
      title: Approvers
      properties:
        approver_ids:
          type: array
          description: The user IDs of the approvers.
          examples:
            - - 1908210134210XIiU3W
              - 220327051250T3AfDDu
          items:
            type: string
        step:
          type: integer
          description: The level of approval.
          examples:
            - 1
        step_condition:
          type: integer
          description: |-
            - `0`: Any approver can approver to pass the current approval level.
            - `1`: Every approver must approve to pass the current approval level.
          examples:
            - 0
      x-tags:
        - Approval
    CreateApprovalResponse:
      type: object
      title: CreateApprovalResponse
      description: An object wrapping a Swit resource.
      properties:
        action_user_id:
          type: string
          description: The approver who approved or rejected the request.
          examples:
            - 1908210134210XIiU3W
        approval_category_id:
          type: string
          description: The ID of the template used.
          examples:
            - 211018034560kSKpPY2
        approval_category_name:
          type: string
          description: The name of the template used.
          examples:
            - Expense reimbursement
        approval_cont_id:
          type: string
          description: The ID of the content of a request.
          examples:
            - 21082101510505XRLEBS
        approval_id:
          type: string
          description: The ID of the request.
          examples:
            - 211125023460BnRasIX
        approval_status:
          type: integer
          description: |-
            Status of the request.
            - `0`: Drafted
            - `1`: Waiting for approval
            - `2`: Approved
            - `3`: Declined
          examples:
            - 1
        approval_url:
          type: string
          description: URL of the request.
          examples:
            - 'https://app.swit.io/group/swit-home/approvals/list?approval_detail=210827081080b4YrFnC'
        approve_condition:
          type: integer
          description: |-
            The condition for the request to be processed to the next level.
            - `0`: Any approver can approve
            - `1`: Every approver must approve
          examples:
            - 0
        asset_data:
          type: array
          description: List of data attachments to the request.
          items:
            $ref: '#/components/schemas/Asset'
        body_blockskit:
          type: string
          description: An object representing the content of the post in rich text.
          examples:
            - '"{\"type\":\"rich_text\",\"elements\":[{\"type\":\"rt_section\",\"elements\":[{\"type\":\"rt_text\",\"content\":\"Content is here.\",\"styles\":{\"bold\":true}}]}]}'
        body_text:
          type: string
          description: The content of the post in plaintext.
          examples:
            - Please review this plan.
        cmp_id:
          type: string
          description: The ID of the organization.
          examples:
            - '19065611325634561'
        completed_step:
          type: integer
          description: The highest level of approval that has been processed so far.
          examples:
            - 0
        created:
          type: string
          description: The date and time at which the request was created.
          examples:
            - '2021-11-05T05:28:19.498530457Z'
        doc_id:
          type: string
          description: Request ID displayed to users. It's used for display purposes while `approval_id` is for programming use.
          examples:
            - 2021-0000000154
        html_content:
          type: string
          description: HTML content attached to the request.
          examples:
            - <div>html <b>content</b></div>
        is_bookmarked:
          type: integer
          description: Whether or not the request is bookmarked by the user.
          examples:
            - 0
        is_html_editable:
          type: integer
          description: 5_278_bfg'
        is_public:
          type: integer
          description: |-
            To whom this request is to be circulated after approved.
            - `0`: None
            - `1`: The submitter's teams
            - `2`: The approvers' teams
            - `3`: Both the submitter's & approvers' teams
          examples:
            - 1
        modified:
          type: string
          description: The date and time at which the request was last edited.
          examples:
            - '2021-11-15T04:58:03Z'
        referrer_teams:
          type: array
          description: The IDs of the recipient teams.
          examples:
            - - 201103015310ImIqLWY
              - 220127051250T3AfDYo
          items:
            type: string
        referrers:
          type: array
          description: Users who're CC'd to the request.
          items:
            $ref: '#/components/schemas/Referrer'
        req_user_id:
          type: string
          description: The ID of the user who created the request.
          examples:
            - 1908210134210XIiU3W
        requested:
          type: string
          description: The date and time at which the request was submitted.
          examples:
            - '2021-11-07T07:12:54.125412423Z'
        step_approvers:
          type: array
          description: Approvers for each level.
          items:
            $ref: '#/components/schemas/StepListOfApprovers'
        step_count:
          type: integer
          description: The total number of approval levels.
          examples:
            - 2
        substitute:
          type: array
          description: Proxy approval status.
          items:
            $ref: '#/components/schemas/Substitute'
        title:
          type: string
          description: The title of the request.
          examples:
            - A new project plan
      x-tags:
        - Approval
    Asset:
      type: object
      title: Asset
      properties:
        approval_asset_id:
          type: string
          description: The ID of the file.
          examples:
            - 544b74ca12c345f4a431012cf0a466d0
        approval_cont_id:
          type: string
          description: The ID of the content of the request.
          examples:
            - 48032101474531F5H499
        approval_id:
          type: string
          description: The ID of the request to which this file is attached.
          examples:
            - 211125023460BnRasIX
        created:
          type: string
          description: The date and time at which the file was uploaded.
          examples:
            - '2021-11-05T05:21:11.498520443Z'
        file_desc:
          type: string
          description: Description on the file.
          examples:
            - This is my image file.
        file_mime:
          type: string
          description: MIME type of the file.
          examples:
            - image
        file_name:
          type: string
          description: The name of the file.
          examples:
            - image.png
        file_path:
          type: string
          description: The URL path of the file.
          examples:
            - /company/19090600325673321/544c74be12c234f4a431047cf0a466d0/211115054812i922AxO.png
        file_size:
          type: integer
          description: The size of the file in bytes.
          examples:
            - 40116
        image_x:
          type: integer
          description: The image's width.
          examples:
            - 630
        image_y:
          type: integer
          description: The image's height.
          examples:
            - 234
        thumbnail:
          type: string
          description: The Thumbnail URL of the file.
          examples:
            - /company/19090600325673321/544c74be12c234f4a431047cf0a466d0/211115054812i922AxO_SWIT512.png
        user_id:
          type: string
          description: The ID of the user who uploaded the file.
          examples:
            - '19081502534623670'
      x-tags:
        - Approval
    Referrer:
      type: object
      title: Referrer
      properties:
        referrer_user_id:
          type: string
          description: The user ID CC'd to the request.
          examples:
            - '19081502534623670'
        register_type:
          type: integer
          description: |-
            How the user was CC'd.
            - `0`: Automatically added as a CC recipient because somebody else is acting as a proxy approver for this user.
            - `1`: The submitter added this user as a CC recipient.
          examples:
            - 1
      x-tags:
        - Approval
    StepListOfApprovers:
      type: object
      title: StepListOfApprovers
      properties:
        approvers:
          type: array
          description: List of approvers at this level.
          items:
            $ref: '#/components/schemas/Approver'
        step:
          type: integer
          description: The level of approval.
          examples:
            - 1
        step_condition:
          type: integer
          description: |-
            - `0`: Any approver can approver to pass the current approval level.
            - `1`: Every approver must approve to pass the current approval level.
          examples:
            - 0
        step_status:
          type: integer
          description: |-
            Approval status at this level.
            - `1`: Waiting for approval
            - `2`: Approved
            - `3`: Declined
          examples:
            - 1
      x-tags:
        - Approval
    Approver:
      type: object
      title: Approver
      properties:
        action_date:
          type: string
          description: The date and time at which the approver approved or declined the request at this level.
          examples:
            - '2022-04-15T05:13:48.713593Z'
        approver_status:
          type: integer
          description: |-
            The approver's status.
            - `1`: Being requested for approval
            - `2`: Approved the request.
            - `3`: Declined the request.
            - `4`: The request was processed at this level by another approver.
          examples:
            - 1
        approver_user_id:
          type: string
          description: The user ID of the approver.
          examples:
            - 1908210134210XIiU3W
        step:
          type: integer
          description: The level of approval.
          examples:
            - 1
      x-tags:
        - Approval
    Substitute:
      type: object
      title: Substitute
      properties:
        substitute_user_id:
          type: string
          description: The ID of the user who're designated as the proxy approver.
          examples:
            - 1908210134210XIiU3W
        target_user_id:
          type: string
          description: The ID of the user who designated the proxy approver.
          examples:
            - 1908210134210XIiU3W
      x-tags:
        - Approval
    ApprovalListResponse:
      type: object
      title: ApprovalListResponse
      description: An object wrapping a Swit resource.
      properties:
        approvals:
          type: array
          description: Details of each request retrieved.
          items:
            $ref: '#/components/schemas/GetApprovalListResponse'
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
      x-tags:
        - Approval
    GetApprovalListResponse:
      type: object
      title: GetApprovalListResponse
      properties:
        approval_category_id:
          type: string
          description: The ID of the template used.
          examples:
            - 1908222367210XIiU3W
        approval_category_name:
          type: string
          description: The name of the template used.
          examples:
            - category name
        approval_id:
          type: string
          description: The ID of the request.
          examples:
            - 1908222367210XIiU3W
        approval_status:
          type: integer
          description: |-
            Status of the request.
            - `0`: Drafted
            - `1`: Waiting for approval
            - `2`: Approved
            - `3`: Declined
          examples:
            - 1
        comment_count:
          type: integer
          description: The number of comments added.
          examples:
            - 3
        created:
          type: string
          description: The date and time at which the request was created.
          examples:
            - '2020-03-14T05:00:07Z'
        doc_id:
          type: string
          description: Request ID displayed to users. It's used for display purposes while `approval_id` is for programming use.
          examples:
            - 2021-0000000001
        is_bookmarked:
          type: integer
          description: Whether or not the request is bookmarked by the user.
          examples:
            - 0
        is_public:
          type: integer
          description: |-
            To whom this request is to be circulated after approved.
            - `0`: None
            - `1`: The submitter's teams
            - `2`: The approvers' teams
            - `3`: Both the submitter's & approvers' teams
          examples:
            - 1
        req_user_id:
          type: string
          description: The ID of the user who created the request.
          examples:
            - 1908222367210XIiU3W
        requested:
          type: string
          description: The date and time at which the request was submitted.
          examples:
            - '2020-03-14T05:00:07Z'
        step_approvers:
          type: array
          description: Approvers for each level.
          items:
            $ref: '#/components/schemas/StepListOfApprovers'
        title:
          type: string
          description: The title of the request.
          examples:
            - title
      x-tags:
        - Approval
    GetApprovalCategoryInfoResponse:
      type: object
      title: GetApprovalCategoryInfoResponse
      description: An object wrapping a Swit resource.
      properties:
        approval_category_id:
          type: string
          description: The ID of the template.
          examples:
            - 211018034560kSKpPY2
        approval_category_name:
          type: string
          description: The name of the template.
          examples:
            - Expense reimbursement
        body_type:
          enum:
            - plain
            - json_string
          description: |-
            Whether or not to use rich styles.
            - `plain`: The `content` value will be parsed as plaintext.
            - `json_string`: The `content` value will be parsed as an object representing a rich-formatted text.
          default: plain
        cmp_id:
          type: string
          description: The ID of the organization.
          examples:
            - '19065611325634561'
        contents:
          type: string
          description: 'Content of the request. If `body_type=json_string` is passed, it must be a string converted from a JSON object representing a rich-formatted text (We’ll add guidelines on how to construct a rich-text object soon).'
          examples:
            - Please review this plan.
        created:
          type: string
          description: The date and time at which the template was created.
          examples:
            - '2021-11-05T05:28:19.498530457Z'
        is_public:
          type: integer
          description: |-
            To whom this request is to be circulated after approved.
            - `0`: None
            - `1`: The submitter's teams
            - `2`: The approvers' teams
            - `3`: Both the submitter's & approvers' teams
          examples:
            - 1
        referrer_teams:
          type: array
          description: The IDs of the recipient teams.
          examples:
            - - 201103015310ImIqLWY
              - 220329051250T3BfDDu
          items:
            type: string
        referrers:
          type: array
          description: The user IDs who're CC'd to the request.
          examples:
            - - 1911070715193IHLKX
              - 2006180101103cUikk5
          items:
            type: string
        req_user_id:
          type: string
          description: The ID of the user who created the request.
          examples:
            - 1908210134210XIiU3W
        step_approvers:
          type: array
          description: Approvers for each level.
          items:
            $ref: '#/components/schemas/Approvers'
        title:
          type: string
          description: The title of the request.
          examples:
            - A new project plan
      x-tags:
        - Approval
    ApprovalCategoryListResponse:
      type: object
      title: ApprovalCategoryListResponse
      description: An object wrapping a Swit resource.
      properties:
        categories:
          type: array
          description: Details of each request template retrieved.
          items:
            $ref: '#/components/schemas/GetApprovalCategoryListResponse'
        offset:
          type: string
          description: Offset string that indicates the last entry returned.
          examples:
            - MTUzOTg0NTg2NTAwMA
      x-tags:
        - Approval
    GetApprovalCategoryListResponse:
      type: object
      title: GetApprovalCategoryListResponse
      properties:
        approval_category_id:
          type: string
          description: The ID of the template used.
          examples:
            - 139gj12p3o9gwrogn94
        approval_category_name:
          type: string
          description: The name of the template used.
          examples:
            - Expense reimbursement
        cmp_id:
          type: string
          description: The ID of the organization.
          examples:
            - '19065611325634561'
        created:
          type: string
          description: The date and time at which the request was created.
          examples:
            - '2021-11-05T05:28:19.498530457Z'
        req_user_id:
          type: string
          description: The ID of the user who created the request.
          examples:
            - 1908210134210XIiU3W
      x-tags:
        - Approval
    GetOrganizationUserListResponse:
      type: object
      title: GetOrganizationUserListResponse
      description: An object wrapping a Swit resource.
      properties:
        user:
          type: object
          properties:
            user_id:
              type: string
              description: The ID of the user.
              examples:
                - 220103011810x7bqTRY
            user_name:
              type: string
              description: The name of the user.
              examples:
                - Jane Kim
            email:
              type: string
              description: The email of the user.
              examples:
                - jane@example.com
            role:
              type: integer
              description: The role of the user.
              examples:
                - 20
            status:
              enum:
                - 'on'
                - 'off'
              description: The status of the user.
            created:
              type: string
              description: The date and time at which the user's account was created.
              examples:
                - '2022-01-03T01:18:43Z'
            bg_color:
              type: string
              description: The background color of the default profile image of the user.
              examples:
                - '#00B1B8'
            is_active:
              type: boolean
              description: Whether the user's account is active.
              default: true
            language:
              enum:
                - en
                - ko
              description: The language setting of the user.
            last_activity:
              type: string
              description: The date and time of the user's last activity.
              examples:
                - '2023-03-10T06:16:40Z'
            mode:
              type: string
              description: The mode of the user.
              examples:
                - sth
            msg:
              type: string
              description: The status message of the user.
              examples:
                - Working from home
            photo:
              type: string
              description: The user's profile image link.
              examples:
                - /profile/2104150006120VwHUYec/OBK6ln3mpZq6JRifDPdQTyHHg9826kCQ_th_500.jpg
            team:
              type: array
              description: The team the user is in.
              items:
                $ref: '#/components/schemas/TeamUser'
            tel:
              type: string
              description: The telephone number of the user.
              examples:
                - +82-10-1234-5678
            timezone:
              type: string
              description: The timezone of the user.
              examples:
                - Asia/Seoul
            timezone_auto_flag:
              enum:
                - 1
                - 2
              description: Whether to make the timezone setting automatically based on the user location or follow the user setting.
              examples:
                - 1
      x-tags:
        - Membership
    TeamUser:
      type: object
      title: TeamUser
      properties:
        created:
          type: string
          description: The date and time the team was created.
          examples:
            - '2022-01-03T01:18:43Z'
        main_dept_yn:
          type: string
          description: The main department the user is in.
          examples:
            - Sales & Marketing
        team_id:
          type: string
          description: The ID of the team.
          examples:
            - 200103015310ImIqLWZ
        team_name:
          type: string
          description: The name of the team.
          examples:
            - Marketing
      x-tags:
        - Team
    AddCompanyUserListParam:
      type: object
      title: AddCompanyUserListParam
      properties:
        new_users:
          type: array
          description: The properties of new guests.
          items:
            $ref: '#/components/schemas/AddCompanyUserParam'
        role:
          type: integer
          description: The role of the user.
          examples:
            - 0
      required:
        - new_users
        - role
      x-tags:
        - Membership
    AddCompanyUserParam:
      type: object
      title: AddCompanyUserParam
      properties:
        language:
          enum:
            - en
            - ko
          description: The language setting of the user.
        msg:
          type: string
          description: The status message of the user.
          examples:
            - Working from home
        tel:
          type: string
          description: The telephone number of the user.
          examples:
            - +82-10-1234-5678
        timezone:
          type: string
          description: The timezone of the user.
          examples:
            - Asia/Seoul
        user_email:
          type: string
          description: The email of the user.
          examples:
            - jane@example.com
        user_name:
          type: string
          description: The name of the user.
          examples:
            - Jane Kim
      required:
        - user_email
        - user_name
      x-tags:
        - Membership
    DelCompanyUserResponse:
      type: object
      title: DelCompanyUserResponse
      description: An object wrapping a Swit resource.
      x-tags:
        - Membership
    GetUserTeamListResponse:
      type: object
      title: GetUserTeamListResponse
      description: An object wrapping a Swit resource.
      properties:
        team:
          type: array
          description: The properties of a team.
          items:
            $ref: '#/components/schemas/Team'
      x-tags:
        - Team
    Team:
      type: object
      title: Team
      properties:
        depth:
          type: integer
          description: The depth of the team.
          examples:
            - 0
        id:
          type: string
          description: The ID of the team.
          examples:
            - 200103015310ImIqLWZ
        name:
          type: string
          description: The name of the team.
          examples:
            - Design
        parent_id:
          type: string
          description: The ID of the parent team.
          examples:
            - 24567231758btrwFTY
        reference:
          type: string
          description: Custom text to be used as a reference. This is useful to store information from another source.
          examples:
            - '145'
        member_cnt:
          type: integer
          description: The count of members.
          examples:
            - 250
        users:
          type: array
          description: The list of members in the team.
          examples:
            - - 1902060217048ALFTG
              - 1906060217048FQOXY
          items:
            type: string
      x-tags:
        - Team
    TeamCreateResponse:
      type: object
      title: TeamCreateResponse
      description: An object wrapping a Swit resource.
      properties:
        data:
          $ref: '#/components/schemas/Team'
      x-tags:
        - Team
    TeamUpdateResponse:
      type: object
      title: TeamUpdateResponse
      description: An object wrapping a Swit resource.
      properties:
        data:
          $ref: '#/components/schemas/Team'
      x-tags:
        - Team
    TeamDeleteResponse:
      type: object
      title: TeamDeleteResponse
      description: An object wrapping a Swit resource.
      properties:
        data:
          $ref: '#/components/schemas/Team'
      x-tags:
        - Team
    TeamSortParam:
      type: object
      title: TeamSortParam
      properties:
        parent_id:
          type: string
          description: The ID of the parent team.
          examples:
            - 24567231758btrwFTY
        team_ids:
          type: array
          description: 'The IDs of the teams. A list of all subteams belonging to the parent team, in order listed.'
          examples:
            - - 20067231758btrwFTY
              - 19110568289hyrpWQT
          items:
            type: string
      x-tags:
        - Team
    TeamUserCreateResponse:
      type: object
      title: TeamUserCreateResponse
      description: An object wrapping a Swit resource.
      properties:
        data:
          $ref: '#/components/schemas/Team'
      x-tags:
        - Team
    TeamUserDeleteResponse:
      type: object
      title: TeamUserDeleteResponse
      description: An object wrapping a Swit resource.
      properties:
        data:
          $ref: '#/components/schemas/Team'
      x-tags:
        - Team
